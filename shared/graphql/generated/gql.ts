/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  query getFundingEvents($idSs58: String!, $first: Int, $offset: Int) {\n    account: accountByIdSs58(idSs58: $idSs58) {\n      events: accountFundingEventsByAccountId(\n        orderBy: EVENT_ID_DESC\n        first: $first\n        offset: $offset\n      ) {\n        edges {\n          node {\n            ...AccountFundingEvent\n          }\n        }\n        totalCount\n        pageInfo {\n          endCursor\n          hasNextPage\n          startCursor\n          hasPreviousPage\n        }\n      }\n    }\n  }\n": types.GetFundingEventsDocument,
    "\n  query getExtrinsicsByAccount(\n    $accountId: Int\n    $first: Int\n    $last: Int\n    $after: Cursor\n    $before: Cursor\n  ) {\n    extrinsics: allExtrinsics(\n      condition: { submitterId: $accountId }\n      orderBy: ID_DESC\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n    ) {\n      pageInfo {\n        hasPreviousPage\n        startCursor\n        hasNextPage\n        endCursor\n      }\n      edges {\n        node {\n          ...Extrinsic\n        }\n      }\n      # totalCount\n    }\n  }\n": types.GetExtrinsicsByAccountDocument,
    "\n  query paginatedPenaltiesQuery($first: Int, $offset: Int, $startBlockId: Int!) {\n    allPenalties(\n      offset: $offset\n      first: $first\n      orderBy: ID_DESC\n      filter: { blockId: { greaterThanOrEqualTo: $startBlockId } }\n    ) {\n      edges {\n        node {\n          ...Penalty\n        }\n      }\n      totalCount\n    }\n  }\n": types.PaginatedPenaltiesQueryDocument,
    "\n  query paginatedPenaltiesByValidatorQuery(\n    $validatorId: Int\n    $first: Int\n    $last: Int\n    $after: Cursor\n    $before: Cursor\n  ) {\n    penalties: allPenalties(\n      condition: { validatorId: $validatorId }\n      orderBy: ID_DESC\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n    ) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          ...Penalty\n        }\n      }\n    }\n  }\n": types.PaginatedPenaltiesByValidatorQueryDocument,
    "\n  query GetLatestBlocks($limit: Int! = 10) {\n    latestBlocks: allBlocks(first: $limit, orderBy: ID_DESC) {\n      nodes {\n        ...BlockListBlock\n      }\n    }\n  }\n": types.GetLatestBlocksDocument,
    "\n  query GetTotalBlockCount {\n    latestBlock: allBlocks(orderBy: ID_DESC, first: 1) {\n      nodes {\n        totalCount: id\n      }\n    }\n  }\n": types.GetTotalBlockCountDocument,
    "\n  query GetAllBlocks($first: Int!, $offset: Int) {\n    allBlocks(orderBy: ID_DESC, offset: $offset, first: $first) {\n      pageInfo {\n        hasPreviousPage\n        startCursor\n        hasNextPage\n        endCursor\n      }\n      edges {\n        node {\n          ...BlockListBlock\n        }\n      }\n      totalCount\n    }\n  }\n": types.GetAllBlocksDocument,
    "\n  query getBlockByHash($hash: String) {\n    blocks: allBlocks(condition: { hash: $hash }, first: 1) {\n      nodes {\n        ...BlockWithEventsAndExtrinsics\n      }\n    }\n    lastBlocks: allBlocks(last: 1) {\n      nodes {\n        id\n      }\n    }\n  }\n": types.GetBlockByHashDocument,
    "\n  query getBlockById($id: Int) {\n    blocks: allBlocks(condition: { id: $id }, first: 1) {\n      nodes {\n        ...BlockWithEventsAndExtrinsics\n      }\n    }\n    lastBlocks: allBlocks(last: 1) {\n      nodes {\n        id\n      }\n    }\n  }\n": types.GetBlockByIdDocument,
    "\n  query GetBrokerAccountData($idSs58: String!) {\n    account: accountByIdSs58(idSs58: $idSs58) {\n      alias\n      broker: brokerByAccountId {\n        channels: swapChannelsByBrokerId(orderBy: ID_DESC) {\n          nodes {\n            commission: brokerCommissionRate\n            swaps: swapsByDepositChannelId {\n              aggregates {\n                sum {\n                  egressValueUsd\n                }\n              }\n              nodes {\n                fees: swapFeesBySwapId(condition: { type: BROKER }) {\n                  aggregates {\n                    sum {\n                      valueUsd\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetBrokerAccountDataDocument,
    "\n  query GetBrokerAccountCacheData($idSs58: String!) {\n    broker: brokerAccountByIdSs58(idSs58: $idSs58) {\n      flipBalance\n      idSs58\n      feesEarned: brokerAccountEarnedFeesByBrokerAccountIdSs58 {\n        groupedAggregates(groupBy: ASSET) {\n          sum {\n            amount\n          }\n          keys\n        }\n      }\n    }\n  }\n": types.GetBrokerAccountCacheDataDocument,
    "\n  query GetBrokerFeeAndWithdrawalData($idSs58: String!, $first: Int, $offset: Int) {\n    account: accountByIdSs58(idSs58: $idSs58) {\n      broker: brokerByAccountId {\n        feesAndWithdrawals: brokerFeeAndWithdrawalsByBrokerId(\n          orderBy: EVENT_ID_DESC\n          first: $first\n          offset: $offset\n        ) {\n          edges {\n            node {\n              amount\n              asset\n              chain\n              eventId\n              type\n              valueUsd\n              event: eventByEventId {\n                blockId\n                indexInBlock\n                block: blockByBlockId {\n                  timestamp\n                }\n              }\n            }\n          }\n          totalCount\n          pageInfo {\n            endCursor\n            hasNextPage\n            startCursor\n            hasPreviousPage\n          }\n        }\n      }\n    }\n  }\n": types.GetBrokerFeeAndWithdrawalDataDocument,
    "\n  query GetRuntimeVersion {\n    allEnvironmentAddresses {\n      nodes {\n        runtimeVersion\n      }\n    }\n  }\n": types.GetRuntimeVersionDocument,
    "\n  query getAllEpochs($first: Int!, $offset: Int) {\n    epochs: allEpoches(orderBy: ID_DESC, offset: $offset, first: $first) {\n      totalCount\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n      edges {\n        node {\n          ...Epoch\n        }\n      }\n    }\n  }\n": types.GetAllEpochsDocument,
    "\n  query getEpochsById($epochId: Int!) {\n    epoch: epochById(id: $epochId) {\n      ...Epoch\n    }\n  }\n": types.GetEpochsByIdDocument,
    "\n  query getAuthorityMembershipsForEpoch($epochId: Int!, $first: Int, $offset: Int) {\n    memberships: allAuthorityMemberships(\n      first: $first\n      offset: $offset\n      condition: { epochId: $epochId }\n      orderBy: BID_DESC\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n      edges {\n        node {\n          ...AuthorityMembershipWithValidator\n        }\n      }\n      totalCount\n    }\n  }\n": types.GetAuthorityMembershipsForEpochDocument,
    "\n  query getActiveAuthorityInfo {\n    epoch: allEpoches(first: 1, orderBy: ID_DESC) {\n      nodes {\n        ...EpochWithMemberships\n      }\n    }\n    lastBlock: allBlocks(first: 1, orderBy: ID_DESC) {\n      nodes {\n        id\n      }\n    }\n  }\n": types.GetActiveAuthorityInfoDocument,
    "\n  query getAuthorityMembershipsForValidator(\n    $validatorId: Int\n    $accountId: Int\n    $first: Int\n    $offset: Int\n  ) {\n    memberships: allAuthorityMemberships(\n      orderBy: ID_DESC\n      first: $first\n      offset: $offset\n      condition: { validatorId: $validatorId }\n    ) {\n      pageInfo {\n        startCursor\n        hasPreviousPage\n        hasNextPage\n        endCursor\n      }\n      totalCount\n      edges {\n        node {\n          ...AuthorityMembershipWithEpoch\n        }\n      }\n    }\n  }\n": types.GetAuthorityMembershipsForValidatorDocument,
    "\n  query getValidatorLatestBlockInfo($idSs58: String!) {\n    accounts: allAccounts(condition: { idSs58: $idSs58 }) {\n      nodes {\n        ...AccountWithPossibleValidator\n      }\n    }\n  }\n": types.GetValidatorLatestBlockInfoDocument,
    "\n  query getHistoricalTotalBond {\n    epochs: allEpoches(orderBy: ID_ASC, last: 100, filter: { id: { notIn: [0, 1] } }) {\n      nodes {\n        epochId: id\n        totalBonded\n        block: blockByStartBlockId {\n          timestamp\n        }\n      }\n    }\n  }\n": types.GetHistoricalTotalBondDocument,
    "\n  query getOnlineAuthorityMemberInfo($minEpochStartBlockId: Int!) {\n    epochs: allEpoches(filter: { startBlockId: { greaterThanOrEqualTo: $minEpochStartBlockId } }) {\n      nodes {\n        epochId: id\n        startBlock: blockByStartBlockId {\n          timestamp\n        }\n        endBlock: blockByEndBlockId {\n          timestamp\n        }\n        members: authorityMembershipsByEpochId {\n          totalCount\n        }\n        heartbeats: authorityHeartbeatsByEpochId {\n          groupedAggregates(groupBy: TIMESTAMP_TRUNCATED_TO_HOUR) {\n            timestampHourUTC: keys\n            distinctCount {\n              validators: validatorId\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetOnlineAuthorityMemberInfoDocument,
    "\n  query GetEventsByBlockIdAndIndex($blockId: Int!, $index: Int!) {\n    events: allEvents(condition: { blockId: $blockId, indexInBlock: $index }, first: 1) {\n      nodes {\n        args\n        extrinsic: extrinsicByExtrinsicId {\n          indexInBlock\n        }\n        metadata: metadatumByMetadataId {\n          name\n          chainspec\n        }\n      }\n    }\n  }\n": types.GetEventsByBlockIdAndIndexDocument,
    "\n  query getExtrinsicByHash($hash: String) {\n    extrinsics: allExtrinsics(condition: { hash: $hash }, first: 1) {\n      nodes {\n        ...Extrinsic\n      }\n    }\n  }\n": types.GetExtrinsicByHashDocument,
    "\n  query getExtrinsicByBlockIdAndIndex($blockId: Int!, $index: Int!) {\n    extrinsics: allExtrinsics(condition: { blockId: $blockId, indexInBlock: $index }, first: 1) {\n      nodes {\n        ...Extrinsic\n        events: eventsByExtrinsicId {\n          nodes {\n            indexInBlock\n            metadata: metadatumByMetadataId {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetExtrinsicByBlockIdAndIndexDocument,
    "\n  query getExtrinsicCount {\n    allExtrinsics(last: 1) {\n      nodes {\n        id\n      }\n    }\n  }\n": types.GetExtrinsicCountDocument,
    "\n  fragment Penalty on Penalty {\n    id\n    validator: validatorByValidatorId {\n      id\n      account: accountByAccountId {\n        idSs58\n        alias\n      }\n    }\n    block: blockByBlockId {\n      id\n      timestamp\n    }\n    reason\n    amount\n  }\n": types.PenaltyFragmentDoc,
    "\n  fragment BlockListBlock on Block {\n    id\n    timestamp\n    extrinsics: extrinsicsByBlockId {\n      totalCount\n    }\n    events: eventsByBlockId {\n      totalCount\n    }\n    validator: validatorByValidatorId {\n      account: accountByAccountId {\n        idSs58\n      }\n    }\n  }\n": types.BlockListBlockFragmentDoc,
    "\n  fragment BlockWithEventsAndExtrinsics on Block {\n    id\n    hash\n    timestamp\n    stateRoot\n    parentHash\n    validator: validatorByValidatorId {\n      account: accountByAccountId {\n        idSs58\n      }\n    }\n    events: eventsByBlockId(condition: { extrinsicId: null }) {\n      nodes {\n        id\n        args\n        blockId\n        metadata: metadatumByMetadataId {\n          id\n          name\n          label\n        }\n      }\n    }\n    extrinsics: extrinsicsByBlockId {\n      nodes {\n        id\n        args\n        fee\n        hash\n        blockId\n        indexInBlock\n        signature\n        success\n        tip\n        metadata: metadatumByMetadataId {\n          id\n          name\n          label\n        }\n        events: eventsByExtrinsicId {\n          nodes {\n            id\n            args\n            blockId\n            metadata: metadatumByMetadataId {\n              id\n              name\n              label\n            }\n          }\n        }\n      }\n    }\n  }\n": types.BlockWithEventsAndExtrinsicsFragmentDoc,
    "\n  fragment Epoch on Epoch {\n    id\n    bond\n    totalBonded\n    startBlock: blockByStartBlockId {\n      id\n      hash\n      timestamp\n    }\n    endBlock: blockByEndBlockId {\n      id\n      hash\n      timestamp\n    }\n  }\n": types.EpochFragmentDoc,
    "\n  fragment EpochWithMemberships on Epoch {\n    id\n    startBlockId\n    endBlockId\n    memberships: authorityMembershipsByEpochId(orderBy: BID_DESC) {\n      nodes {\n        id\n        bid\n        reward\n        validator: validatorByValidatorId {\n          id\n          account: accountByAccountId {\n            id\n            alias\n            idSs58\n          }\n          cfeVersion: cfeVersionId\n          totalMemberships: authorityMembershipsByValidatorId {\n            totalCount\n          }\n        }\n      }\n    }\n    slashedEvents: accountFundingEventsByEpochId(condition: { type: SLASHED }) {\n      groupedAggregates(groupBy: ACCOUNT_ID) {\n        accountId: keys\n        sum {\n          amount\n        }\n      }\n    }\n  }\n": types.EpochWithMembershipsFragmentDoc,
    "\n  fragment AccountWithPossibleValidator on Account {\n    id\n    alias\n    idSs58\n    boundRedeemAddress\n    historicRewards: accountEpochBalanceChangesByAccountId(\n      filter: { endOfEpochBalance: { isNull: false } }\n    ) {\n      aggregates {\n        sum {\n          startOfEpochBalance\n          endOfEpochBalance\n          balanceChange\n        }\n      }\n    }\n    currentRewards: accountEpochBalanceChangesByAccountId(\n      last: 1\n      filter: { endOfEpochBalance: { isNull: true } }\n    ) {\n      nodes {\n        startOfEpochBalance\n        balanceChange\n      }\n    }\n    validators: validatorsByAccountId {\n      nodes {\n        id\n        lastHeartbeatBlockId\n        cfeVersion: cfeVersionId\n        membership: authorityMembershipsByValidatorId(last: 1) {\n          nodes {\n            epochId\n          }\n        }\n      }\n    }\n  }\n": types.AccountWithPossibleValidatorFragmentDoc,
    "\n  fragment AuthorityMembershipWithEpoch on AuthorityMembership {\n    id\n    reward\n    epoch: epochByEpochId {\n      id\n      startBlockId\n      endBlockId\n      bond\n      totalBonded\n      eventType: accountFundingEventsByEpochId(condition: { accountId: $accountId }) {\n        groupedAggregates(groupBy: TYPE) {\n          type: keys\n          sum {\n            amount\n          }\n        }\n      }\n    }\n  }\n": types.AuthorityMembershipWithEpochFragmentDoc,
    "\n  fragment AuthorityMembershipWithValidator on AuthorityMembership {\n    id\n    bid\n    reward\n    validator: validatorByValidatorId {\n      id\n      account: accountByAccountId {\n        id\n        idSs58\n        alias\n        fundingEvents: accountFundingEventsByAccountId(condition: { epochId: $epochId }) {\n          groupedAggregates(groupBy: TYPE) {\n            sum {\n              amount\n            }\n            keys\n          }\n        }\n      }\n    }\n  }\n": types.AuthorityMembershipWithValidatorFragmentDoc,
    "\n  fragment Extrinsic on Extrinsic {\n    id\n    args\n    fee\n    hash\n    blockId\n    indexInBlock\n    signature\n    success\n    tip\n    account: accountBySubmitterId {\n      id\n      idSs58\n    }\n    block: blockByBlockId {\n      id\n      hash\n      timestamp\n    }\n    events: eventsByExtrinsicId {\n      nodes {\n        ...Event\n      }\n    }\n    metadata: metadatumByMetadataId {\n      id\n      name\n      label\n    }\n  }\n": types.ExtrinsicFragmentDoc,
    "\n  fragment AccountFundingEvent on AccountFundingEvent {\n    id\n    amount\n    type\n    event: eventByEventId {\n      indexInBlock\n      blockId\n      block: blockByBlockId {\n        hash\n        timestamp\n      }\n      extrinsic: extrinsicByExtrinsicId {\n        id\n        hash\n        args\n      }\n    }\n  }\n": types.AccountFundingEventFragmentDoc,
    "\n  fragment Event on Event {\n    id\n    args\n    metadata: metadatumByMetadataId {\n      id\n      name\n      label\n    }\n  }\n": types.EventFragmentDoc,
    "\n  fragment Swap on Swap {\n    id\n    nativeId\n    sourceAsset\n    depositAmount\n    depositValueUsd\n    destinationAsset\n    destinationAddress\n    egressAmount\n    egressValueUsd\n    intermediateAmount\n    intermediateValueUsd\n    ccmDepositReceivedEventId\n    swapScheduledBlockTimestamp\n    egressScheduledEventId\n    egressIgnoredEventId\n    broadcast: broadcastByBroadcastId {\n      broadcastRequestedEventId\n      broadcastAbortedEventId\n      broadcastSuccessEventId\n    }\n  }\n": types.SwapFragmentDoc,
    "\n  fragment LiquidityDepositChannelInfo on LiquidityDepositChannel {\n    id\n    asset\n    chain\n    depositAddress\n    channelId\n    lp: liquidityProviderByLiquidityProviderId {\n      account: accountByAccountId {\n        idSs58\n      }\n    }\n    sourceChainExpiryBlock\n    isExpired\n    deposits: liquidityDepositsByLiquidityDepositChannelId {\n      nodes {\n        depositAmount\n        lp: liquidityProviderByLiquidityProviderId {\n          account: accountByAccountId {\n            idSs58\n          }\n        }\n        fee\n        event: eventByEventId {\n          id\n          indexInBlock\n        }\n        block: blockByBlockId {\n          id\n          timestamp\n        }\n      }\n      aggregates {\n        sum {\n          depositValueUsd\n        }\n      }\n    }\n    block: blockByIssuedBlockId {\n      timestamp\n      id\n    }\n    event: eventByIssuedEventId {\n      id\n      indexInBlock\n    }\n  }\n": types.LiquidityDepositChannelInfoFragmentDoc,
    "\n  query GetLiquidityDepositChannel(\n    $channelId: BigInt!\n    $chain: ChainflipChain!\n    $issuedBlockId: Int!\n  ) {\n    channels: allLiquidityDepositChannels(\n      condition: { channelId: $channelId, chain: $chain, issuedBlockId: $issuedBlockId }\n    ) {\n      nodes {\n        ...LiquidityDepositChannelInfo\n      }\n    }\n  }\n": types.GetLiquidityDepositChannelDocument,
    "\n  query GetCacheUndeployedLiquidity($lpIdSs58: String) {\n    depositBalances: allDepositBalances(condition: { lpIdSs58: $lpIdSs58 }) {\n      groupedAggregates(groupBy: ASSET) {\n        sum {\n          amount\n        }\n        keys\n      }\n    }\n  }\n": types.GetCacheUndeployedLiquidityDocument,
    "\n  query GetLastLiquidityDeposit($asset: ChainflipAsset!) {\n    deposits: allLiquidityDeposits(\n      orderBy: ID_DESC\n      first: 1\n      filter: { asset: { equalTo: $asset } }\n    ) {\n      nodes {\n        asset\n        block: blockByBlockId {\n          timestamp\n        }\n      }\n    }\n  }\n": types.GetLastLiquidityDepositDocument,
    "\n  query GetLastLiquidityDepositForAccount($asset: ChainflipAsset!, $lpIdSs58: String!) {\n    account: accountByIdSs58(idSs58: $lpIdSs58) {\n      lp: liquidityProviderByAccountId {\n        deposits: liquidityDepositsByLiquidityProviderId(\n          orderBy: ID_DESC\n          first: 1\n          filter: { asset: { equalTo: $asset } }\n        ) {\n          nodes {\n            asset\n            block: blockByBlockId {\n              timestamp\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetLastLiquidityDepositForAccountDocument,
    "\n  fragment LpAccountWithBalances on LpAccount {\n    idSs58\n    alias\n    openOrders\n    balances: depositBalancesByLpIdSs58 {\n      nodes {\n        chain\n        asset\n        amount\n      }\n    }\n  }\n": types.LpAccountWithBalancesFragmentDoc,
    "\n  fragment Pool on Pool {\n    id\n    baseAsset\n    quoteAsset\n    price\n  }\n": types.PoolFragmentDoc,
    "\n  fragment LiquidityBalanceEvent on LiquidityBalanceEvent {\n    eventId\n    amount\n    asset\n    valueUsd\n    event: eventByEventId {\n      block: blockByBlockId {\n        id\n        timestamp\n      }\n      extrinsic: extrinsicByExtrinsicId {\n        indexInBlock\n        blockId\n      }\n      blockId\n      indexInBlock\n    }\n    depositChannel: liquidityDepositChannelByLiquidityDepositChannelId {\n      chain\n      channelId\n      issuedBlockId\n    }\n    broadcast: broadcastByBroadcastId {\n      id\n      broadcastSuccessEventId\n    }\n  }\n": types.LiquidityBalanceEventFragmentDoc,
    "\n  query GetFilteredLpAccountsWithBalances($filter: String) {\n    lps: allLpAccounts(\n      filter: {\n        or: [\n          { idSs58: { includesInsensitive: $filter } }\n          { alias: { includesInsensitive: $filter } }\n        ]\n      }\n    ) {\n      totalCount\n      nodes {\n        ...LpAccountWithBalances\n      }\n    }\n    pools: allPools {\n      nodes {\n        ...Pool\n      }\n    }\n  }\n": types.GetFilteredLpAccountsWithBalancesDocument,
    "\n  query GetLpAcccountsWithCollectedFees($accountIds: [String!]!) {\n    allAccounts(filter: { idSs58: { in: $accountIds } }) {\n      nodes {\n        idSs58\n        lp: liquidityProviderByAccountId {\n          fees: collectedFeesByLiquidityProviderId {\n            aggregates {\n              sum {\n                valueUsd\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetLpAcccountsWithCollectedFeesDocument,
    "\n  query getLiquidityBalanceChangeEvents($idSs58: String!, $first: Int, $offset: Int) {\n    account: accountByIdSs58(idSs58: $idSs58) {\n      lp: liquidityProviderByAccountId {\n        events: liquidityBalanceEventsByLiquidityProviderId(\n          orderBy: EVENT_ID_DESC\n          first: $first\n          offset: $offset\n        ) {\n          edges {\n            node {\n              ...LiquidityBalanceEvent\n            }\n          }\n          totalCount\n          pageInfo {\n            endCursor\n            hasNextPage\n            startCursor\n            hasPreviousPage\n          }\n        }\n      }\n    }\n  }\n": types.GetLiquidityBalanceChangeEventsDocument,
    "\n  fragment RefundAddresses on LiquidityProvider {\n    bitcoinRefundAddress\n    ethereumRefundAddress\n    polkadotRefundAddress\n  }\n": types.RefundAddressesFragmentDoc,
    "\n  query getLpAccountWithRefundAddresses($idSs58: String!) {\n    account: accountByIdSs58(idSs58: $idSs58) {\n      lp: liquidityProviderByAccountId {\n        ...RefundAddresses\n      }\n    }\n  }\n": types.GetLpAccountWithRefundAddressesDocument,
    "\n  fragment PoolOrderEvent on PoolOrderEvent {\n    id\n    eventType\n    orderType\n    baseAmount\n    baseAsset\n    quoteAmount\n    maximumRate\n    minimumRate\n    timestamp\n    lp: liquidityProviderByLiquidityProviderId {\n      account: accountByAccountId {\n        idSs58\n      }\n    }\n    event: eventByEventId {\n      indexInBlock\n      blockId\n    }\n  }\n": types.PoolOrderEventFragmentDoc,
    "\n  query GetPoolActivity(\n    $baseAsset: ChainflipAsset!\n    $first: Int\n    $last: Int\n    $after: Cursor\n    $before: Cursor\n  ) {\n    poolOrders: allPoolOrderEvents(\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n      orderBy: ID_DESC\n      filter: {\n        baseAsset: { equalTo: $baseAsset }\n        or: [{ quoteAmount: { notEqualTo: \"0\" } }, { baseAmount: { notEqualTo: \"0\" } }]\n      }\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n      edges {\n        node {\n          ...PoolOrderEvent\n        }\n      }\n    }\n  }\n": types.GetPoolActivityDocument,
    "\n  query GetPoolAggregates {\n    poolSwaps: allPoolSwaps {\n      groupedAggregates(groupBy: [FROM_ASSET, TO_ASSET]) {\n        fromAssetToAsset: keys\n        sum {\n          toValueUsd\n          liquidityFeeValueUsd\n        }\n      }\n    }\n  }\n": types.GetPoolAggregatesDocument,
    "\n  query GetPoolAggregatesByDate($startingTimestamp: Datetime!, $endingTimestamp: Datetime) {\n    poolSwaps: allPoolSwaps(\n      filter: {\n        assetSwappedBlockTimestamp: {\n          greaterThanOrEqualTo: $startingTimestamp\n          lessThanOrEqualTo: $endingTimestamp\n        }\n      }\n    ) {\n      groupedAggregates(groupBy: [FROM_ASSET, TO_ASSET]) {\n        fromAssetToAsset: keys\n        sum {\n          toValueUsd\n          liquidityFeeValueUsd\n        }\n      }\n    }\n  }\n": types.GetPoolAggregatesByDateDocument,
    "\n  query GetPoolAggregatesByDateTruncatedToHour(\n    $startingTimestamp: Datetime!\n    $endingTimestamp: Datetime\n  ) {\n    poolSwaps: allPoolSwaps(\n      filter: {\n        assetSwappedBlockTimestamp: {\n          greaterThanOrEqualTo: $startingTimestamp\n          lessThanOrEqualTo: $endingTimestamp\n        }\n      }\n    ) {\n      groupedAggregates(\n        groupBy: [FROM_ASSET, TO_ASSET, ASSET_SWAPPED_BLOCK_TIMESTAMP_TRUNCATED_TO_HOUR]\n      ) {\n        fromAssetToAssetDate: keys\n        sum {\n          toValueUsd\n        }\n      }\n    }\n  }\n": types.GetPoolAggregatesByDateTruncatedToHourDocument,
    "\n  query GetEnvironmentAddress {\n    environmentAddress: environmentAddressById(id: 1) {\n      keyManagerAddress\n      stateChainGatewayAddress\n    }\n  }\n": types.GetEnvironmentAddressDocument,
    "\n  query GetValidatorByIdSs58($validatorId: String!) {\n    validators: allValidators(condition: { idSs58: $validatorId }) {\n      nodes {\n        ...CacheValidator\n      }\n    }\n  }\n": types.GetValidatorByIdSs58Document,
    "\n  query GetActiveCacheValidators {\n    validators: allValidators(\n      filter: {\n        or: [{ isCurrentAuthority: { equalTo: true } }, { isCurrentBackup: { equalTo: true } }]\n      }\n    ) {\n      nodes {\n        ...CacheValidator\n      }\n    }\n  }\n": types.GetActiveCacheValidatorsDocument,
    "\n  query GetAllSwaps($first: Int, $offset: Int, $destinationAddress: String) {\n    allSwaps(\n      orderBy: ID_DESC\n      offset: $offset\n      first: $first\n      filter: { destinationAddress: { includesInsensitive: $destinationAddress } }\n    ) {\n      pageInfo {\n        hasPreviousPage\n        startCursor\n        hasNextPage\n        endCursor\n      }\n      edges {\n        node {\n          ...Swap\n        }\n      }\n      totalCount\n    }\n  }\n": types.GetAllSwapsDocument,
    "\n  query GetSwapByNativeId($nativeId: BigInt!) {\n    swap: swapByNativeId(nativeId: $nativeId) {\n      ...Swap\n    }\n  }\n": types.GetSwapByNativeIdDocument,
    "\n  query GetAllSwapsByAsset($first: Int, $offset: Int, $baseAsset: ChainflipAsset!) {\n    allSwaps(\n      filter: {\n        or: [\n          { sourceAsset: { equalTo: $baseAsset } }\n          { destinationAsset: { equalTo: $baseAsset } }\n        ]\n      }\n      orderBy: ID_DESC\n      offset: $offset\n      first: $first\n    ) {\n      pageInfo {\n        hasPreviousPage\n        startCursor\n        hasNextPage\n        endCursor\n      }\n      edges {\n        node {\n          ...Swap\n        }\n      }\n      totalCount\n    }\n  }\n": types.GetAllSwapsByAssetDocument,
    "\n  query GetSwapAggregates(\n    $minSwapScheduledTimestamp: Datetime! = \"2013-01-01T00:00:00.000Z\"\n    $maxSwapScheduledTimestamp: Datetime\n  ) {\n    oneHopSwaps: allSwaps(\n      filter: {\n        and: [\n          { intermediateAmount: { isNull: true } }\n          {\n            swapScheduledBlockTimestamp: {\n              greaterThanOrEqualTo: $minSwapScheduledTimestamp\n              lessThanOrEqualTo: $maxSwapScheduledTimestamp\n            }\n          }\n        ]\n      }\n    ) {\n      aggregatesBySourceAsset: groupedAggregates(\n        groupBy: [SOURCE_ASSET, SWAP_SCHEDULED_BLOCK_TIMESTAMP_TRUNCATED_TO_HOUR]\n      ) {\n        ...SwapAggregatesFragment\n      }\n      aggregatesByDestAsset: groupedAggregates(\n        groupBy: [DESTINATION_ASSET, SWAP_SCHEDULED_BLOCK_TIMESTAMP_TRUNCATED_TO_HOUR]\n      ) {\n        ...SwapAggregatesFragment\n      }\n    }\n    twoHopSwaps: allSwaps(\n      filter: {\n        and: [\n          { intermediateAmount: { isNull: false } }\n          {\n            swapScheduledBlockTimestamp: {\n              greaterThanOrEqualTo: $minSwapScheduledTimestamp\n              lessThanOrEqualTo: $maxSwapScheduledTimestamp\n            }\n          }\n        ]\n      }\n    ) {\n      aggregatesBySourceAsset: groupedAggregates(\n        groupBy: [SOURCE_ASSET, SWAP_SCHEDULED_BLOCK_TIMESTAMP_TRUNCATED_TO_HOUR]\n      ) {\n        ...SwapAggregatesFragment\n      }\n      aggregatesByDestAsset: groupedAggregates(\n        groupBy: [DESTINATION_ASSET, SWAP_SCHEDULED_BLOCK_TIMESTAMP_TRUNCATED_TO_HOUR]\n      ) {\n        ...SwapAggregatesFragment\n      }\n    }\n  }\n\n  fragment SwapAggregatesFragment on SwapAggregates {\n    assetAndHour: keys\n    distinctCount {\n      id\n    }\n  }\n": types.GetSwapAggregatesDocument,
    "\n  fragment ChannelInfo on SwapChannel {\n    id\n    channelId\n    depositAddress\n    destinationAddress\n    destinationChain\n    # TODO(mainnet): remove this\n    expiryBlockId\n    issuedEventId\n    sourceChain\n    sourceAsset\n    destinationChain\n    destinationAsset\n    brokerCommissionRate\n    isExpired\n    sourceChainExpiryBlock\n    issuedBlock: blockByIssuedBlockId {\n      id\n      timestamp\n    }\n    issuedEvent: eventByIssuedEventId {\n      indexInBlock\n    }\n    expiryEvent: eventByExpiryEventId {\n      indexInBlock\n      block: blockByBlockId {\n        timestamp\n      }\n    }\n  }\n": types.ChannelInfoFragmentDoc,
    "\n  query GetSwapChannelData(\n    $channelId: BigInt!\n    $sourceChain: ChainflipChain!\n    $issuedBlockId: Int!\n  ) {\n    channel: swapChannelByIssuedBlockIdAndSourceChainAndChannelId(\n      channelId: $channelId\n      issuedBlockId: $issuedBlockId\n      sourceChain: $sourceChain\n    ) {\n      ...ChannelInfo\n      ignoredDeposits: ignoredDepositsBySwapDepositChannelId(orderBy: EVENT_ID_DESC) {\n        nodes {\n          id\n          amount\n          reason\n          event: eventByEventId {\n            id\n            indexInBlock\n            block: blockByBlockId {\n              id\n              timestamp\n            }\n          }\n        }\n      }\n      broker: brokerByBrokerId {\n        account: accountByAccountId {\n          idSs58\n        }\n      }\n      swaps: swapsByDepositChannelId(orderBy: NATIVE_ID_DESC) {\n        nodes {\n          destinationAsset\n          nativeId\n          sourceAsset\n          depositAmount\n          depositValueUsd\n          egressAmount\n          egressValueUsd\n          swapScheduledBlockTimestamp\n          intermediateAmount\n          intermediateValueUsd\n          executedEvent: eventBySwapExecutedEventId {\n            block: blockByBlockId {\n              timestamp\n            }\n          }\n          swapFeesBySwapId {\n            nodes {\n              ...SwapFee\n            }\n          }\n        }\n      }\n    }\n    lastBlock: allBlocks(last: 1) {\n      nodes {\n        id\n      }\n    }\n  }\n": types.GetSwapChannelDataDocument,
    "\n  fragment OpenChannel on SwapChannel {\n    brokerCommissionRate\n    channelId\n    destinationAddress\n    destinationAsset\n    destinationChain\n    sourceAsset\n    sourceChain\n    issuedEvent: eventByIssuedEventId {\n      indexInBlock\n      block: blockByBlockId {\n        id\n        timestamp\n      }\n    }\n    broker: brokerByBrokerId {\n      account: accountByAccountId {\n        idSs58\n        alias\n      }\n    }\n    swaps: swapsByDepositChannelId {\n      aggregates {\n        sum {\n          egressValueUsd\n          intermediateValueUsd\n        }\n      }\n    }\n  }\n": types.OpenChannelFragmentDoc,
    "\n  query GetOpenSwapChannels($first: Int!, $offset: Int) {\n    channels: allSwapChannels(\n      condition: { isExpired: false }\n      orderBy: ISSUED_EVENT_ID_DESC\n      offset: $offset\n      first: $first\n    ) {\n      pageInfo {\n        hasPreviousPage\n        startCursor\n        hasNextPage\n        endCursor\n      }\n      edges {\n        node {\n          ...OpenChannel\n        }\n      }\n      totalCount\n    }\n  }\n": types.GetOpenSwapChannelsDocument,
    "\n  fragment BrokerSwapChannel on SwapChannel {\n    ...OpenChannel\n    isExpired\n  }\n": types.BrokerSwapChannelFragmentDoc,
    "\n  query GetSwapChannelsByBrokerId($idSs58: String!, $first: Int, $offset: Int) {\n    account: accountByIdSs58(idSs58: $idSs58) {\n      broker: brokerByAccountId {\n        channels: swapChannelsByBrokerId(\n          orderBy: ISSUED_EVENT_ID_DESC\n          offset: $offset\n          first: $first\n        ) {\n          totalCount\n          edges {\n            node {\n              ...BrokerSwapChannel\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetSwapChannelsByBrokerIdDocument,
    "\n  fragment SwapInfo on Swap {\n    nativeId\n    sourceAsset\n    sourceChain\n    destinationAsset\n    destinationChain\n    destinationAddress\n    depositAmount\n    depositValueUsd\n    egressAmount\n    egressValueUsd\n    intermediateAmount\n    intermediateValueUsd\n    ccmMessage\n    egressIgnoredEventId\n    ccmDepositReceivedEvent: eventByCcmDepositReceivedEventId {\n      indexInBlock\n      block: blockByBlockId {\n        id\n        timestamp\n      }\n    }\n    scheduledEvent: eventBySwapScheduledEventId {\n      indexInBlock\n      args\n      block: blockByBlockId {\n        id\n        timestamp\n      }\n    }\n    executedEvent: eventBySwapExecutedEventId {\n      indexInBlock\n      block: blockByBlockId {\n        id\n        timestamp\n      }\n    }\n    egressScheduledEvent: eventByEgressScheduledEventId {\n      indexInBlock\n      block: blockByBlockId {\n        id\n        timestamp\n      }\n    }\n    egressIgnoredEvent: eventByEgressIgnoredEventId {\n      indexInBlock\n      block: blockByBlockId {\n        id\n        timestamp\n      }\n    }\n    broadcast: broadcastByBroadcastId {\n      broadcastRequestedEventId\n      broadcastAbortedEventId\n      broadcastSuccessEventId\n      successEvent: eventByBroadcastSuccessEventId {\n        indexInBlock\n        block: blockByBlockId {\n          id\n          timestamp\n        }\n      }\n      requestedEvent: eventByBroadcastRequestedEventId {\n        indexInBlock\n        block: blockByBlockId {\n          id\n          timestamp\n        }\n      }\n      abortedEvent: eventByBroadcastAbortedEventId {\n        indexInBlock\n        block: blockByBlockId {\n          id\n          timestamp\n        }\n      }\n      transactionPayload\n    }\n    channel: swapChannelByDepositChannelId {\n      ...ChannelInfo\n    }\n    swapFeesBySwapId {\n      edges {\n        node {\n          ...SwapFee\n        }\n      }\n    }\n    error: stateChainErrorByStateChainErrorId {\n      name\n      docs\n    }\n  }\n": types.SwapInfoFragmentDoc,
    "\n  fragment SwapFee on SwapFee {\n    valueUsd\n    amount\n    asset\n    type\n  }\n": types.SwapFeeFragmentDoc,
    "\n  query GetSwapDataByNativeId($nativeId: BigInt!) {\n    swap: swapByNativeId(nativeId: $nativeId) {\n      ...SwapInfo\n    }\n  }\n": types.GetSwapDataByNativeIdDocument,
    "\n  query getLastDeposits($idSs58: String!) {\n    account: accountByIdSs58(idSs58: $idSs58) {\n      lp: liquidityProviderByAccountId {\n        deposits: liquidityDepositsByLiquidityProviderId(first: 3, orderBy: ID_DESC) {\n          nodes {\n            id\n            depositAmount\n            channel: liquidityDepositChannelByLiquidityDepositChannelId {\n              asset\n              chain\n              issuedBlockId\n              channelId\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetLastDepositsDocument,
    "\n  query getDepositsForSpecificLiquidityDepositChannel(\n    $channelId: BigInt\n    $chain: ChainflipChain\n    $issuedBlockId: Int\n  ) {\n    channels: allLiquidityDepositChannels(\n      condition: { channelId: $channelId, chain: $chain, issuedBlockId: $issuedBlockId }\n      orderBy: ID_DESC\n      first: 1\n    ) {\n      nodes {\n        id\n        asset\n        chain\n        channelId\n        deposits: liquidityDepositsByLiquidityDepositChannelId {\n          nodes {\n            depositAmount\n            event: eventByEventId {\n              blockId\n              indexInBlock\n            }\n          }\n        }\n        depositAddress\n      }\n    }\n  }\n": types.GetDepositsForSpecificLiquidityDepositChannelDocument,
    "\n  query getCollectedFees($idSs58: String!, $baseAsset: ChainflipAsset) {\n    account: accountByIdSs58(idSs58: $idSs58) {\n      lp: liquidityProviderByAccountId {\n        poolOrderEvents: poolOrdersByLiquidityProviderId(condition: { baseAsset: $baseAsset }) {\n          aggregates {\n            sum {\n              baseCollectedFeesUsd\n              quoteCollectedFeesUsd\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetCollectedFeesDocument,
    "\n  query getSpecificPoolSwapsData(\n    $date24HoursAgo: Datetime!\n    $date48HoursAgo: Datetime!\n    $baseAsset: ChainflipAsset!\n    $quoteAsset: ChainflipAsset!\n  ) {\n    currentDayAggregates: allPoolSwaps(\n      filter: {\n        assetSwappedBlockTimestamp: { greaterThanOrEqualTo: $date24HoursAgo }\n        fromAsset: { in: [$baseAsset, $quoteAsset] }\n        toAsset: { in: [$baseAsset, $quoteAsset] }\n      }\n    ) {\n      groupedAggregates(groupBy: [FROM_ASSET, TO_ASSET]) {\n        fromAssetToAsset: keys\n        sum {\n          toValueUsd\n          liquidityFeeValueUsd\n        }\n        distinctCount {\n          assetSwappedEventId\n        }\n      }\n    }\n    previousDayAggregates: allPoolSwaps(\n      filter: {\n        assetSwappedBlockTimestamp: {\n          greaterThanOrEqualTo: $date48HoursAgo\n          lessThan: $date24HoursAgo\n        }\n        fromAsset: { in: [$baseAsset, $quoteAsset] }\n        toAsset: { in: [$baseAsset, $quoteAsset] }\n      }\n    ) {\n      groupedAggregates(groupBy: [FROM_ASSET, TO_ASSET]) {\n        fromAssetToAsset: keys\n        sum {\n          toValueUsd\n          liquidityFeeValueUsd\n        }\n      }\n    }\n  }\n": types.GetSpecificPoolSwapsDataDocument,
    "\n  query BannerStatus($app: App!) {\n    banner: allBanners(filter: { or: [{ app: { equalTo: $app } }, { app: { equalTo: ALL } }] }) {\n      nodes {\n        message\n        type\n      }\n    }\n  }\n": types.BannerStatusDocument,
    "\n  fragment CacheValidator on Validator {\n    idHex\n    idSs58\n    alias\n    apyBp\n    boundRedeemAddress\n    processorId\n    totalRewards\n    isCurrentAuthority\n    isCurrentBackup\n    isQualified\n    isOnline\n    isBidding\n    isKeyholder\n    reputationPoints\n    lockedBalance\n    unlockedBalance\n    firstFundingTimestamp\n    latestFundingTimestamp\n  }\n": types.CacheValidatorFragmentDoc,
    "\n  query GetMarketData($asset: ChainflipAsset!, $numberOfDays: Int!) {\n    marketData(asset: $asset, numberOfDays: $numberOfDays) {\n      candlesticks {\n        ... on CandlestickData {\n          time\n          open\n          low\n          high\n          close\n        }\n        ... on WhitespaceData {\n          time\n        }\n      }\n      volumes {\n        ... on HistogramData {\n          value\n          time\n        }\n        ... on WhitespaceData {\n          time\n        }\n      }\n      prices {\n        time\n        value\n      }\n      globalVolume\n    }\n  }\n": types.GetMarketDataDocument,
    "\n  query GetChainTrackingQuery {\n    allChainTrackings {\n      nodes {\n        chain\n        height\n      }\n    }\n  }\n": types.GetChainTrackingQueryDocument,
    "\n  query GetLatestAuction {\n    auction: auctionById(id: 1) {\n      minActiveBid\n      startBlockNumber\n      endBlockNumber\n      currentHeight\n      projectedLockup\n      redemptionPeriodAsPercentage\n      targetSetSize\n    }\n  }\n": types.GetLatestAuctionDocument,
    "\n  query GetLatestEpochs($limit: Int!) {\n    latestEpoch: allEpoches(first: $limit, orderBy: ID_DESC) {\n      nodes {\n        ...EpochWithRotation\n      }\n    }\n  }\n": types.GetLatestEpochsDocument,
    "\n  query getPendingDeposits($address: String!, $chain: String!, $asset: String!) {\n    pendingDeposits(input: { address: $address, chain: $chain, asset: $asset }) {\n      amount\n    }\n  }\n": types.GetPendingDepositsDocument,
    "\n  query getLpCollectedFees($idSs58: String!) {\n    account: accountByIdSs58(idSs58: $idSs58) {\n      lp: liquidityProviderByAccountId {\n        collectedFees: collectedFeesByLiquidityProviderId {\n          aggregates {\n            sum {\n              valueUsd\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetLpCollectedFeesDocument,
    "\n  query getAllLpsCollectedFees {\n    allCollectedFees {\n      aggregates {\n        sum {\n          valueUsd\n        }\n      }\n    }\n  }\n": types.GetAllLpsCollectedFeesDocument,
    "\n  query getOpenPoolOrders($idSs58: String!) {\n    lpAccountByIdSs58(idSs58: $idSs58) {\n      openOrders\n    }\n  }\n": types.GetOpenPoolOrdersDocument,
    "\n  query getTradeHistoryByAccount($first: Int!, $idSs58: String!) {\n    account: accountByIdSs58(idSs58: $idSs58) {\n      lp: liquidityProviderByAccountId {\n        tradeHistory: poolOrdersByLiquidityProviderId(\n          orderBy: ID_DESC\n          first: $first\n          filter: {\n            or: [\n              {\n                orderType: { equalTo: LIMIT }\n                or: [\n                  { filledBaseAmount: { notEqualTo: \"0\" } }\n                  { filledQuoteAmount: { notEqualTo: \"0\" } }\n                ]\n              }\n              {\n                orderType: { equalTo: RANGE }\n                or: [\n                  { baseCollectedFees: { notEqualTo: \"0\" } }\n                  { quoteCollectedFees: { notEqualTo: \"0\" } }\n                ]\n              }\n            ]\n          }\n        ) {\n          nodes {\n            ...PoolOrder\n          }\n        }\n      }\n    }\n  }\n": types.GetTradeHistoryByAccountDocument,
    "\n  query getOrdersByAccount($first: Int!, $idSs58: String!) {\n    account: accountByIdSs58(idSs58: $idSs58) {\n      lp: liquidityProviderByAccountId {\n        tradeHistory: poolOrdersByLiquidityProviderId(\n          orderBy: ID_DESC\n          first: $first\n          filter: {\n            or: [\n              {\n                orderType: { equalTo: LIMIT }\n                or: [\n                  { filledBaseAmount: { notEqualTo: \"0\" } }\n                  { filledQuoteAmount: { notEqualTo: \"0\" } }\n                ]\n              }\n              {\n                orderType: { equalTo: RANGE }\n                or: [\n                  { baseCollectedFees: { notEqualTo: \"0\" } }\n                  { quoteCollectedFees: { notEqualTo: \"0\" } }\n                ]\n              }\n            ]\n          }\n        ) {\n          nodes {\n            ...PoolOrder\n          }\n        }\n        allOrders: poolOrdersByLiquidityProviderId(orderBy: ID_DESC, first: $first) {\n          nodes {\n            ...PoolOrder\n          }\n        }\n      }\n    }\n  }\n": types.GetOrdersByAccountDocument,
    "\n  fragment PoolOrder on PoolOrder {\n    id\n    orderId\n    liquidityProviderId\n    orderType\n    status\n    lowerTick\n    upperTick\n    filledQuoteAmount\n    quoteAsset\n    quoteAmount\n    quoteCollectedFees\n    quoteCollectedFeesUsd\n    baseAsset\n    filledBaseAmount\n    baseAmount\n    baseCollectedFees\n    baseCollectedFeesUsd\n    orderCreatedEventId\n    orderLastUpdatedEventId\n  }\n": types.PoolOrderFragmentDoc,
    "\n  query GetCachePools($baseAsset: ChainflipAsset) {\n    pools: allPools(condition: { baseAsset: $baseAsset }) {\n      nodes {\n        baseAsset\n        quoteAsset\n        price\n        rangeOrderPrice\n        baseLiquidityAmount\n        quoteLiquidityAmount\n        liquidityFeeHundredthPips\n      }\n    }\n  }\n": types.GetCachePoolsDocument,
    "\n  query GetPoolTableData($date24HoursAgo: Datetime!, $date48HoursAgo: Datetime!) {\n    currentDayAggregates: allPoolSwaps(\n      filter: { assetSwappedBlockTimestamp: { greaterThanOrEqualTo: $date24HoursAgo } }\n    ) {\n      groupedAggregates(groupBy: [FROM_ASSET, TO_ASSET]) {\n        fromAssetToAsset: keys\n        sum {\n          toValueUsd\n          liquidityFeeValueUsd\n        }\n      }\n    }\n    previousDayAggregates: allPoolSwaps(\n      filter: {\n        assetSwappedBlockTimestamp: {\n          greaterThanOrEqualTo: $date48HoursAgo\n          lessThan: $date24HoursAgo\n        }\n      }\n    ) {\n      groupedAggregates(groupBy: [FROM_ASSET, TO_ASSET]) {\n        fromAssetToAsset: keys\n        sum {\n          toValueUsd\n          liquidityFeeValueUsd\n        }\n      }\n    }\n  }\n": types.GetPoolTableDataDocument,
    "\n  query GetAllEnvironmentAddresses {\n    allEnvironmentAddresses {\n      nodes {\n        redemptionTax\n      }\n    }\n  }\n": types.GetAllEnvironmentAddressesDocument,
    "\n  query GetLatestFlipSupplyQuery {\n    flipSupply: flipSupplyById(id: 1) {\n      totalIssuance\n      offchainFunds\n      annualSystemCompoundedRewards\n    }\n  }\n": types.GetLatestFlipSupplyQueryDocument,
    "\n  fragment ExecutedRedemption on ExecutedRedemption {\n    txId\n    block\n    amount\n    validatorIdHex\n    blockTimestamp\n  }\n": types.ExecutedRedemptionFragmentDoc,
    "\n  fragment EventWithBlock on Event {\n    id\n    block: blockByBlockId {\n      id\n      timestamp\n      hash\n    }\n    indexInBlock\n  }\n": types.EventWithBlockFragmentDoc,
    "\n  fragment EpochWithRotation on Epoch {\n    id\n    rotationEvents: rotationEventsByEpochId {\n      nodes {\n        id\n        type\n        event: eventByEventId {\n          ...EventWithBlock\n        }\n      }\n    }\n  }\n": types.EpochWithRotationFragmentDoc,
    "\n  query Validators {\n    validators: allValidators {\n      nodes {\n        ...CacheValidator\n      }\n    }\n  }\n": types.ValidatorsDocument,
    "\n  query GetValidatorsByWalletAddress($walletAddress: String!) {\n    walletValidators: validatorsByWalletAddress(input: { address: $walletAddress }) {\n      ...CacheValidator\n    }\n  }\n": types.GetValidatorsByWalletAddressDocument,
    "\n  query GetExecutedRedemptionsByValidatorIdsHex($accountIds: [String!]) {\n    executedRedemptions: allExecutedRedemptions(\n      filter: { validatorIdHex: { in: $accountIds } }\n      orderBy: BLOCK_TIMESTAMP_DESC\n    ) {\n      nodes {\n        ...ExecutedRedemption\n      }\n    }\n  }\n": types.GetExecutedRedemptionsByValidatorIdsHexDocument,
    "\n  query GetLatestAuthoritySet {\n    currentAuthoritySet: allAuthorityMemberships(orderBy: EPOCH_ID_DESC, first: 1) {\n      nodes {\n        epochId\n      }\n    }\n  }\n": types.GetLatestAuthoritySetDocument,
    "\n  query GetAccountsRewards($accountIds: [Int!]!, $epochId: Int) {\n    historicRewards: allAccountEpochBalanceChanges(\n      filter: { accountId: { in: $accountIds }, endOfEpochBalance: { isNull: false } }\n    ) {\n      groupedAggregates(groupBy: ACCOUNT_ID) {\n        accountId: keys\n        sum {\n          startOfEpochBalance\n          balanceChange\n          endOfEpochBalance\n        }\n      }\n    }\n    currentRewards: allAccountEpochBalanceChanges(\n      filter: { accountId: { in: $accountIds }, epochId: { equalTo: $epochId } }\n    ) {\n      nodes {\n        accountId\n        startOfEpochBalance\n        balanceChange\n      }\n    }\n  }\n": types.GetAccountsRewardsDocument,
    "\n  query GetAccountsSlashQuery($accountIds: [Int!], $epochId: Int) {\n    slashedEvents: allAccountFundingEvents(\n      filter: { accountId: { in: $accountIds }, and: { type: { equalTo: SLASHED } } }\n    ) {\n      groupedAggregates(groupBy: ACCOUNT_ID) {\n        accountId: keys\n        sum {\n          amount\n        }\n      }\n    }\n    currentEpochSlashedEvents: allAccountFundingEvents(\n      filter: {\n        accountId: { in: $accountIds }\n        and: { type: { equalTo: SLASHED }, and: { epochId: { equalTo: $epochId } } }\n      }\n    ) {\n      aggregates {\n        sum {\n          amount\n        }\n      }\n    }\n  }\n": types.GetAccountsSlashQueryDocument,
    "\n  query GetValidatorCfeVersion($idSs58: String!) {\n    account: accountByIdSs58(idSs58: $idSs58) {\n      validator: validatorByAccountId {\n        cfeVersionId\n      }\n    }\n  }\n": types.GetValidatorCfeVersionDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getFundingEvents($idSs58: String!, $first: Int, $offset: Int) {\n    account: accountByIdSs58(idSs58: $idSs58) {\n      events: accountFundingEventsByAccountId(\n        orderBy: EVENT_ID_DESC\n        first: $first\n        offset: $offset\n      ) {\n        edges {\n          node {\n            ...AccountFundingEvent\n          }\n        }\n        totalCount\n        pageInfo {\n          endCursor\n          hasNextPage\n          startCursor\n          hasPreviousPage\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getFundingEvents($idSs58: String!, $first: Int, $offset: Int) {\n    account: accountByIdSs58(idSs58: $idSs58) {\n      events: accountFundingEventsByAccountId(\n        orderBy: EVENT_ID_DESC\n        first: $first\n        offset: $offset\n      ) {\n        edges {\n          node {\n            ...AccountFundingEvent\n          }\n        }\n        totalCount\n        pageInfo {\n          endCursor\n          hasNextPage\n          startCursor\n          hasPreviousPage\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getExtrinsicsByAccount(\n    $accountId: Int\n    $first: Int\n    $last: Int\n    $after: Cursor\n    $before: Cursor\n  ) {\n    extrinsics: allExtrinsics(\n      condition: { submitterId: $accountId }\n      orderBy: ID_DESC\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n    ) {\n      pageInfo {\n        hasPreviousPage\n        startCursor\n        hasNextPage\n        endCursor\n      }\n      edges {\n        node {\n          ...Extrinsic\n        }\n      }\n      # totalCount\n    }\n  }\n"): (typeof documents)["\n  query getExtrinsicsByAccount(\n    $accountId: Int\n    $first: Int\n    $last: Int\n    $after: Cursor\n    $before: Cursor\n  ) {\n    extrinsics: allExtrinsics(\n      condition: { submitterId: $accountId }\n      orderBy: ID_DESC\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n    ) {\n      pageInfo {\n        hasPreviousPage\n        startCursor\n        hasNextPage\n        endCursor\n      }\n      edges {\n        node {\n          ...Extrinsic\n        }\n      }\n      # totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query paginatedPenaltiesQuery($first: Int, $offset: Int, $startBlockId: Int!) {\n    allPenalties(\n      offset: $offset\n      first: $first\n      orderBy: ID_DESC\n      filter: { blockId: { greaterThanOrEqualTo: $startBlockId } }\n    ) {\n      edges {\n        node {\n          ...Penalty\n        }\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query paginatedPenaltiesQuery($first: Int, $offset: Int, $startBlockId: Int!) {\n    allPenalties(\n      offset: $offset\n      first: $first\n      orderBy: ID_DESC\n      filter: { blockId: { greaterThanOrEqualTo: $startBlockId } }\n    ) {\n      edges {\n        node {\n          ...Penalty\n        }\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query paginatedPenaltiesByValidatorQuery(\n    $validatorId: Int\n    $first: Int\n    $last: Int\n    $after: Cursor\n    $before: Cursor\n  ) {\n    penalties: allPenalties(\n      condition: { validatorId: $validatorId }\n      orderBy: ID_DESC\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n    ) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          ...Penalty\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query paginatedPenaltiesByValidatorQuery(\n    $validatorId: Int\n    $first: Int\n    $last: Int\n    $after: Cursor\n    $before: Cursor\n  ) {\n    penalties: allPenalties(\n      condition: { validatorId: $validatorId }\n      orderBy: ID_DESC\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n    ) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          ...Penalty\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetLatestBlocks($limit: Int! = 10) {\n    latestBlocks: allBlocks(first: $limit, orderBy: ID_DESC) {\n      nodes {\n        ...BlockListBlock\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetLatestBlocks($limit: Int! = 10) {\n    latestBlocks: allBlocks(first: $limit, orderBy: ID_DESC) {\n      nodes {\n        ...BlockListBlock\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetTotalBlockCount {\n    latestBlock: allBlocks(orderBy: ID_DESC, first: 1) {\n      nodes {\n        totalCount: id\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetTotalBlockCount {\n    latestBlock: allBlocks(orderBy: ID_DESC, first: 1) {\n      nodes {\n        totalCount: id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetAllBlocks($first: Int!, $offset: Int) {\n    allBlocks(orderBy: ID_DESC, offset: $offset, first: $first) {\n      pageInfo {\n        hasPreviousPage\n        startCursor\n        hasNextPage\n        endCursor\n      }\n      edges {\n        node {\n          ...BlockListBlock\n        }\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query GetAllBlocks($first: Int!, $offset: Int) {\n    allBlocks(orderBy: ID_DESC, offset: $offset, first: $first) {\n      pageInfo {\n        hasPreviousPage\n        startCursor\n        hasNextPage\n        endCursor\n      }\n      edges {\n        node {\n          ...BlockListBlock\n        }\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getBlockByHash($hash: String) {\n    blocks: allBlocks(condition: { hash: $hash }, first: 1) {\n      nodes {\n        ...BlockWithEventsAndExtrinsics\n      }\n    }\n    lastBlocks: allBlocks(last: 1) {\n      nodes {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  query getBlockByHash($hash: String) {\n    blocks: allBlocks(condition: { hash: $hash }, first: 1) {\n      nodes {\n        ...BlockWithEventsAndExtrinsics\n      }\n    }\n    lastBlocks: allBlocks(last: 1) {\n      nodes {\n        id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getBlockById($id: Int) {\n    blocks: allBlocks(condition: { id: $id }, first: 1) {\n      nodes {\n        ...BlockWithEventsAndExtrinsics\n      }\n    }\n    lastBlocks: allBlocks(last: 1) {\n      nodes {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  query getBlockById($id: Int) {\n    blocks: allBlocks(condition: { id: $id }, first: 1) {\n      nodes {\n        ...BlockWithEventsAndExtrinsics\n      }\n    }\n    lastBlocks: allBlocks(last: 1) {\n      nodes {\n        id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetBrokerAccountData($idSs58: String!) {\n    account: accountByIdSs58(idSs58: $idSs58) {\n      alias\n      broker: brokerByAccountId {\n        channels: swapChannelsByBrokerId(orderBy: ID_DESC) {\n          nodes {\n            commission: brokerCommissionRate\n            swaps: swapsByDepositChannelId {\n              aggregates {\n                sum {\n                  egressValueUsd\n                }\n              }\n              nodes {\n                fees: swapFeesBySwapId(condition: { type: BROKER }) {\n                  aggregates {\n                    sum {\n                      valueUsd\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetBrokerAccountData($idSs58: String!) {\n    account: accountByIdSs58(idSs58: $idSs58) {\n      alias\n      broker: brokerByAccountId {\n        channels: swapChannelsByBrokerId(orderBy: ID_DESC) {\n          nodes {\n            commission: brokerCommissionRate\n            swaps: swapsByDepositChannelId {\n              aggregates {\n                sum {\n                  egressValueUsd\n                }\n              }\n              nodes {\n                fees: swapFeesBySwapId(condition: { type: BROKER }) {\n                  aggregates {\n                    sum {\n                      valueUsd\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetBrokerAccountCacheData($idSs58: String!) {\n    broker: brokerAccountByIdSs58(idSs58: $idSs58) {\n      flipBalance\n      idSs58\n      feesEarned: brokerAccountEarnedFeesByBrokerAccountIdSs58 {\n        groupedAggregates(groupBy: ASSET) {\n          sum {\n            amount\n          }\n          keys\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetBrokerAccountCacheData($idSs58: String!) {\n    broker: brokerAccountByIdSs58(idSs58: $idSs58) {\n      flipBalance\n      idSs58\n      feesEarned: brokerAccountEarnedFeesByBrokerAccountIdSs58 {\n        groupedAggregates(groupBy: ASSET) {\n          sum {\n            amount\n          }\n          keys\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetBrokerFeeAndWithdrawalData($idSs58: String!, $first: Int, $offset: Int) {\n    account: accountByIdSs58(idSs58: $idSs58) {\n      broker: brokerByAccountId {\n        feesAndWithdrawals: brokerFeeAndWithdrawalsByBrokerId(\n          orderBy: EVENT_ID_DESC\n          first: $first\n          offset: $offset\n        ) {\n          edges {\n            node {\n              amount\n              asset\n              chain\n              eventId\n              type\n              valueUsd\n              event: eventByEventId {\n                blockId\n                indexInBlock\n                block: blockByBlockId {\n                  timestamp\n                }\n              }\n            }\n          }\n          totalCount\n          pageInfo {\n            endCursor\n            hasNextPage\n            startCursor\n            hasPreviousPage\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetBrokerFeeAndWithdrawalData($idSs58: String!, $first: Int, $offset: Int) {\n    account: accountByIdSs58(idSs58: $idSs58) {\n      broker: brokerByAccountId {\n        feesAndWithdrawals: brokerFeeAndWithdrawalsByBrokerId(\n          orderBy: EVENT_ID_DESC\n          first: $first\n          offset: $offset\n        ) {\n          edges {\n            node {\n              amount\n              asset\n              chain\n              eventId\n              type\n              valueUsd\n              event: eventByEventId {\n                blockId\n                indexInBlock\n                block: blockByBlockId {\n                  timestamp\n                }\n              }\n            }\n          }\n          totalCount\n          pageInfo {\n            endCursor\n            hasNextPage\n            startCursor\n            hasPreviousPage\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetRuntimeVersion {\n    allEnvironmentAddresses {\n      nodes {\n        runtimeVersion\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetRuntimeVersion {\n    allEnvironmentAddresses {\n      nodes {\n        runtimeVersion\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getAllEpochs($first: Int!, $offset: Int) {\n    epochs: allEpoches(orderBy: ID_DESC, offset: $offset, first: $first) {\n      totalCount\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n      edges {\n        node {\n          ...Epoch\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getAllEpochs($first: Int!, $offset: Int) {\n    epochs: allEpoches(orderBy: ID_DESC, offset: $offset, first: $first) {\n      totalCount\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n      edges {\n        node {\n          ...Epoch\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getEpochsById($epochId: Int!) {\n    epoch: epochById(id: $epochId) {\n      ...Epoch\n    }\n  }\n"): (typeof documents)["\n  query getEpochsById($epochId: Int!) {\n    epoch: epochById(id: $epochId) {\n      ...Epoch\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getAuthorityMembershipsForEpoch($epochId: Int!, $first: Int, $offset: Int) {\n    memberships: allAuthorityMemberships(\n      first: $first\n      offset: $offset\n      condition: { epochId: $epochId }\n      orderBy: BID_DESC\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n      edges {\n        node {\n          ...AuthorityMembershipWithValidator\n        }\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query getAuthorityMembershipsForEpoch($epochId: Int!, $first: Int, $offset: Int) {\n    memberships: allAuthorityMemberships(\n      first: $first\n      offset: $offset\n      condition: { epochId: $epochId }\n      orderBy: BID_DESC\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n      edges {\n        node {\n          ...AuthorityMembershipWithValidator\n        }\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getActiveAuthorityInfo {\n    epoch: allEpoches(first: 1, orderBy: ID_DESC) {\n      nodes {\n        ...EpochWithMemberships\n      }\n    }\n    lastBlock: allBlocks(first: 1, orderBy: ID_DESC) {\n      nodes {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  query getActiveAuthorityInfo {\n    epoch: allEpoches(first: 1, orderBy: ID_DESC) {\n      nodes {\n        ...EpochWithMemberships\n      }\n    }\n    lastBlock: allBlocks(first: 1, orderBy: ID_DESC) {\n      nodes {\n        id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getAuthorityMembershipsForValidator(\n    $validatorId: Int\n    $accountId: Int\n    $first: Int\n    $offset: Int\n  ) {\n    memberships: allAuthorityMemberships(\n      orderBy: ID_DESC\n      first: $first\n      offset: $offset\n      condition: { validatorId: $validatorId }\n    ) {\n      pageInfo {\n        startCursor\n        hasPreviousPage\n        hasNextPage\n        endCursor\n      }\n      totalCount\n      edges {\n        node {\n          ...AuthorityMembershipWithEpoch\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getAuthorityMembershipsForValidator(\n    $validatorId: Int\n    $accountId: Int\n    $first: Int\n    $offset: Int\n  ) {\n    memberships: allAuthorityMemberships(\n      orderBy: ID_DESC\n      first: $first\n      offset: $offset\n      condition: { validatorId: $validatorId }\n    ) {\n      pageInfo {\n        startCursor\n        hasPreviousPage\n        hasNextPage\n        endCursor\n      }\n      totalCount\n      edges {\n        node {\n          ...AuthorityMembershipWithEpoch\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getValidatorLatestBlockInfo($idSs58: String!) {\n    accounts: allAccounts(condition: { idSs58: $idSs58 }) {\n      nodes {\n        ...AccountWithPossibleValidator\n      }\n    }\n  }\n"): (typeof documents)["\n  query getValidatorLatestBlockInfo($idSs58: String!) {\n    accounts: allAccounts(condition: { idSs58: $idSs58 }) {\n      nodes {\n        ...AccountWithPossibleValidator\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getHistoricalTotalBond {\n    epochs: allEpoches(orderBy: ID_ASC, last: 100, filter: { id: { notIn: [0, 1] } }) {\n      nodes {\n        epochId: id\n        totalBonded\n        block: blockByStartBlockId {\n          timestamp\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getHistoricalTotalBond {\n    epochs: allEpoches(orderBy: ID_ASC, last: 100, filter: { id: { notIn: [0, 1] } }) {\n      nodes {\n        epochId: id\n        totalBonded\n        block: blockByStartBlockId {\n          timestamp\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getOnlineAuthorityMemberInfo($minEpochStartBlockId: Int!) {\n    epochs: allEpoches(filter: { startBlockId: { greaterThanOrEqualTo: $minEpochStartBlockId } }) {\n      nodes {\n        epochId: id\n        startBlock: blockByStartBlockId {\n          timestamp\n        }\n        endBlock: blockByEndBlockId {\n          timestamp\n        }\n        members: authorityMembershipsByEpochId {\n          totalCount\n        }\n        heartbeats: authorityHeartbeatsByEpochId {\n          groupedAggregates(groupBy: TIMESTAMP_TRUNCATED_TO_HOUR) {\n            timestampHourUTC: keys\n            distinctCount {\n              validators: validatorId\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getOnlineAuthorityMemberInfo($minEpochStartBlockId: Int!) {\n    epochs: allEpoches(filter: { startBlockId: { greaterThanOrEqualTo: $minEpochStartBlockId } }) {\n      nodes {\n        epochId: id\n        startBlock: blockByStartBlockId {\n          timestamp\n        }\n        endBlock: blockByEndBlockId {\n          timestamp\n        }\n        members: authorityMembershipsByEpochId {\n          totalCount\n        }\n        heartbeats: authorityHeartbeatsByEpochId {\n          groupedAggregates(groupBy: TIMESTAMP_TRUNCATED_TO_HOUR) {\n            timestampHourUTC: keys\n            distinctCount {\n              validators: validatorId\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetEventsByBlockIdAndIndex($blockId: Int!, $index: Int!) {\n    events: allEvents(condition: { blockId: $blockId, indexInBlock: $index }, first: 1) {\n      nodes {\n        args\n        extrinsic: extrinsicByExtrinsicId {\n          indexInBlock\n        }\n        metadata: metadatumByMetadataId {\n          name\n          chainspec\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetEventsByBlockIdAndIndex($blockId: Int!, $index: Int!) {\n    events: allEvents(condition: { blockId: $blockId, indexInBlock: $index }, first: 1) {\n      nodes {\n        args\n        extrinsic: extrinsicByExtrinsicId {\n          indexInBlock\n        }\n        metadata: metadatumByMetadataId {\n          name\n          chainspec\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getExtrinsicByHash($hash: String) {\n    extrinsics: allExtrinsics(condition: { hash: $hash }, first: 1) {\n      nodes {\n        ...Extrinsic\n      }\n    }\n  }\n"): (typeof documents)["\n  query getExtrinsicByHash($hash: String) {\n    extrinsics: allExtrinsics(condition: { hash: $hash }, first: 1) {\n      nodes {\n        ...Extrinsic\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getExtrinsicByBlockIdAndIndex($blockId: Int!, $index: Int!) {\n    extrinsics: allExtrinsics(condition: { blockId: $blockId, indexInBlock: $index }, first: 1) {\n      nodes {\n        ...Extrinsic\n        events: eventsByExtrinsicId {\n          nodes {\n            indexInBlock\n            metadata: metadatumByMetadataId {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getExtrinsicByBlockIdAndIndex($blockId: Int!, $index: Int!) {\n    extrinsics: allExtrinsics(condition: { blockId: $blockId, indexInBlock: $index }, first: 1) {\n      nodes {\n        ...Extrinsic\n        events: eventsByExtrinsicId {\n          nodes {\n            indexInBlock\n            metadata: metadatumByMetadataId {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getExtrinsicCount {\n    allExtrinsics(last: 1) {\n      nodes {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  query getExtrinsicCount {\n    allExtrinsics(last: 1) {\n      nodes {\n        id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment Penalty on Penalty {\n    id\n    validator: validatorByValidatorId {\n      id\n      account: accountByAccountId {\n        idSs58\n        alias\n      }\n    }\n    block: blockByBlockId {\n      id\n      timestamp\n    }\n    reason\n    amount\n  }\n"): (typeof documents)["\n  fragment Penalty on Penalty {\n    id\n    validator: validatorByValidatorId {\n      id\n      account: accountByAccountId {\n        idSs58\n        alias\n      }\n    }\n    block: blockByBlockId {\n      id\n      timestamp\n    }\n    reason\n    amount\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment BlockListBlock on Block {\n    id\n    timestamp\n    extrinsics: extrinsicsByBlockId {\n      totalCount\n    }\n    events: eventsByBlockId {\n      totalCount\n    }\n    validator: validatorByValidatorId {\n      account: accountByAccountId {\n        idSs58\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment BlockListBlock on Block {\n    id\n    timestamp\n    extrinsics: extrinsicsByBlockId {\n      totalCount\n    }\n    events: eventsByBlockId {\n      totalCount\n    }\n    validator: validatorByValidatorId {\n      account: accountByAccountId {\n        idSs58\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment BlockWithEventsAndExtrinsics on Block {\n    id\n    hash\n    timestamp\n    stateRoot\n    parentHash\n    validator: validatorByValidatorId {\n      account: accountByAccountId {\n        idSs58\n      }\n    }\n    events: eventsByBlockId(condition: { extrinsicId: null }) {\n      nodes {\n        id\n        args\n        blockId\n        metadata: metadatumByMetadataId {\n          id\n          name\n          label\n        }\n      }\n    }\n    extrinsics: extrinsicsByBlockId {\n      nodes {\n        id\n        args\n        fee\n        hash\n        blockId\n        indexInBlock\n        signature\n        success\n        tip\n        metadata: metadatumByMetadataId {\n          id\n          name\n          label\n        }\n        events: eventsByExtrinsicId {\n          nodes {\n            id\n            args\n            blockId\n            metadata: metadatumByMetadataId {\n              id\n              name\n              label\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment BlockWithEventsAndExtrinsics on Block {\n    id\n    hash\n    timestamp\n    stateRoot\n    parentHash\n    validator: validatorByValidatorId {\n      account: accountByAccountId {\n        idSs58\n      }\n    }\n    events: eventsByBlockId(condition: { extrinsicId: null }) {\n      nodes {\n        id\n        args\n        blockId\n        metadata: metadatumByMetadataId {\n          id\n          name\n          label\n        }\n      }\n    }\n    extrinsics: extrinsicsByBlockId {\n      nodes {\n        id\n        args\n        fee\n        hash\n        blockId\n        indexInBlock\n        signature\n        success\n        tip\n        metadata: metadatumByMetadataId {\n          id\n          name\n          label\n        }\n        events: eventsByExtrinsicId {\n          nodes {\n            id\n            args\n            blockId\n            metadata: metadatumByMetadataId {\n              id\n              name\n              label\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment Epoch on Epoch {\n    id\n    bond\n    totalBonded\n    startBlock: blockByStartBlockId {\n      id\n      hash\n      timestamp\n    }\n    endBlock: blockByEndBlockId {\n      id\n      hash\n      timestamp\n    }\n  }\n"): (typeof documents)["\n  fragment Epoch on Epoch {\n    id\n    bond\n    totalBonded\n    startBlock: blockByStartBlockId {\n      id\n      hash\n      timestamp\n    }\n    endBlock: blockByEndBlockId {\n      id\n      hash\n      timestamp\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment EpochWithMemberships on Epoch {\n    id\n    startBlockId\n    endBlockId\n    memberships: authorityMembershipsByEpochId(orderBy: BID_DESC) {\n      nodes {\n        id\n        bid\n        reward\n        validator: validatorByValidatorId {\n          id\n          account: accountByAccountId {\n            id\n            alias\n            idSs58\n          }\n          cfeVersion: cfeVersionId\n          totalMemberships: authorityMembershipsByValidatorId {\n            totalCount\n          }\n        }\n      }\n    }\n    slashedEvents: accountFundingEventsByEpochId(condition: { type: SLASHED }) {\n      groupedAggregates(groupBy: ACCOUNT_ID) {\n        accountId: keys\n        sum {\n          amount\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment EpochWithMemberships on Epoch {\n    id\n    startBlockId\n    endBlockId\n    memberships: authorityMembershipsByEpochId(orderBy: BID_DESC) {\n      nodes {\n        id\n        bid\n        reward\n        validator: validatorByValidatorId {\n          id\n          account: accountByAccountId {\n            id\n            alias\n            idSs58\n          }\n          cfeVersion: cfeVersionId\n          totalMemberships: authorityMembershipsByValidatorId {\n            totalCount\n          }\n        }\n      }\n    }\n    slashedEvents: accountFundingEventsByEpochId(condition: { type: SLASHED }) {\n      groupedAggregates(groupBy: ACCOUNT_ID) {\n        accountId: keys\n        sum {\n          amount\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment AccountWithPossibleValidator on Account {\n    id\n    alias\n    idSs58\n    boundRedeemAddress\n    historicRewards: accountEpochBalanceChangesByAccountId(\n      filter: { endOfEpochBalance: { isNull: false } }\n    ) {\n      aggregates {\n        sum {\n          startOfEpochBalance\n          endOfEpochBalance\n          balanceChange\n        }\n      }\n    }\n    currentRewards: accountEpochBalanceChangesByAccountId(\n      last: 1\n      filter: { endOfEpochBalance: { isNull: true } }\n    ) {\n      nodes {\n        startOfEpochBalance\n        balanceChange\n      }\n    }\n    validators: validatorsByAccountId {\n      nodes {\n        id\n        lastHeartbeatBlockId\n        cfeVersion: cfeVersionId\n        membership: authorityMembershipsByValidatorId(last: 1) {\n          nodes {\n            epochId\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment AccountWithPossibleValidator on Account {\n    id\n    alias\n    idSs58\n    boundRedeemAddress\n    historicRewards: accountEpochBalanceChangesByAccountId(\n      filter: { endOfEpochBalance: { isNull: false } }\n    ) {\n      aggregates {\n        sum {\n          startOfEpochBalance\n          endOfEpochBalance\n          balanceChange\n        }\n      }\n    }\n    currentRewards: accountEpochBalanceChangesByAccountId(\n      last: 1\n      filter: { endOfEpochBalance: { isNull: true } }\n    ) {\n      nodes {\n        startOfEpochBalance\n        balanceChange\n      }\n    }\n    validators: validatorsByAccountId {\n      nodes {\n        id\n        lastHeartbeatBlockId\n        cfeVersion: cfeVersionId\n        membership: authorityMembershipsByValidatorId(last: 1) {\n          nodes {\n            epochId\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment AuthorityMembershipWithEpoch on AuthorityMembership {\n    id\n    reward\n    epoch: epochByEpochId {\n      id\n      startBlockId\n      endBlockId\n      bond\n      totalBonded\n      eventType: accountFundingEventsByEpochId(condition: { accountId: $accountId }) {\n        groupedAggregates(groupBy: TYPE) {\n          type: keys\n          sum {\n            amount\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment AuthorityMembershipWithEpoch on AuthorityMembership {\n    id\n    reward\n    epoch: epochByEpochId {\n      id\n      startBlockId\n      endBlockId\n      bond\n      totalBonded\n      eventType: accountFundingEventsByEpochId(condition: { accountId: $accountId }) {\n        groupedAggregates(groupBy: TYPE) {\n          type: keys\n          sum {\n            amount\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment AuthorityMembershipWithValidator on AuthorityMembership {\n    id\n    bid\n    reward\n    validator: validatorByValidatorId {\n      id\n      account: accountByAccountId {\n        id\n        idSs58\n        alias\n        fundingEvents: accountFundingEventsByAccountId(condition: { epochId: $epochId }) {\n          groupedAggregates(groupBy: TYPE) {\n            sum {\n              amount\n            }\n            keys\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment AuthorityMembershipWithValidator on AuthorityMembership {\n    id\n    bid\n    reward\n    validator: validatorByValidatorId {\n      id\n      account: accountByAccountId {\n        id\n        idSs58\n        alias\n        fundingEvents: accountFundingEventsByAccountId(condition: { epochId: $epochId }) {\n          groupedAggregates(groupBy: TYPE) {\n            sum {\n              amount\n            }\n            keys\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment Extrinsic on Extrinsic {\n    id\n    args\n    fee\n    hash\n    blockId\n    indexInBlock\n    signature\n    success\n    tip\n    account: accountBySubmitterId {\n      id\n      idSs58\n    }\n    block: blockByBlockId {\n      id\n      hash\n      timestamp\n    }\n    events: eventsByExtrinsicId {\n      nodes {\n        ...Event\n      }\n    }\n    metadata: metadatumByMetadataId {\n      id\n      name\n      label\n    }\n  }\n"): (typeof documents)["\n  fragment Extrinsic on Extrinsic {\n    id\n    args\n    fee\n    hash\n    blockId\n    indexInBlock\n    signature\n    success\n    tip\n    account: accountBySubmitterId {\n      id\n      idSs58\n    }\n    block: blockByBlockId {\n      id\n      hash\n      timestamp\n    }\n    events: eventsByExtrinsicId {\n      nodes {\n        ...Event\n      }\n    }\n    metadata: metadatumByMetadataId {\n      id\n      name\n      label\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment AccountFundingEvent on AccountFundingEvent {\n    id\n    amount\n    type\n    event: eventByEventId {\n      indexInBlock\n      blockId\n      block: blockByBlockId {\n        hash\n        timestamp\n      }\n      extrinsic: extrinsicByExtrinsicId {\n        id\n        hash\n        args\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment AccountFundingEvent on AccountFundingEvent {\n    id\n    amount\n    type\n    event: eventByEventId {\n      indexInBlock\n      blockId\n      block: blockByBlockId {\n        hash\n        timestamp\n      }\n      extrinsic: extrinsicByExtrinsicId {\n        id\n        hash\n        args\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment Event on Event {\n    id\n    args\n    metadata: metadatumByMetadataId {\n      id\n      name\n      label\n    }\n  }\n"): (typeof documents)["\n  fragment Event on Event {\n    id\n    args\n    metadata: metadatumByMetadataId {\n      id\n      name\n      label\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment Swap on Swap {\n    id\n    nativeId\n    sourceAsset\n    depositAmount\n    depositValueUsd\n    destinationAsset\n    destinationAddress\n    egressAmount\n    egressValueUsd\n    intermediateAmount\n    intermediateValueUsd\n    ccmDepositReceivedEventId\n    swapScheduledBlockTimestamp\n    egressScheduledEventId\n    egressIgnoredEventId\n    broadcast: broadcastByBroadcastId {\n      broadcastRequestedEventId\n      broadcastAbortedEventId\n      broadcastSuccessEventId\n    }\n  }\n"): (typeof documents)["\n  fragment Swap on Swap {\n    id\n    nativeId\n    sourceAsset\n    depositAmount\n    depositValueUsd\n    destinationAsset\n    destinationAddress\n    egressAmount\n    egressValueUsd\n    intermediateAmount\n    intermediateValueUsd\n    ccmDepositReceivedEventId\n    swapScheduledBlockTimestamp\n    egressScheduledEventId\n    egressIgnoredEventId\n    broadcast: broadcastByBroadcastId {\n      broadcastRequestedEventId\n      broadcastAbortedEventId\n      broadcastSuccessEventId\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment LiquidityDepositChannelInfo on LiquidityDepositChannel {\n    id\n    asset\n    chain\n    depositAddress\n    channelId\n    lp: liquidityProviderByLiquidityProviderId {\n      account: accountByAccountId {\n        idSs58\n      }\n    }\n    sourceChainExpiryBlock\n    isExpired\n    deposits: liquidityDepositsByLiquidityDepositChannelId {\n      nodes {\n        depositAmount\n        lp: liquidityProviderByLiquidityProviderId {\n          account: accountByAccountId {\n            idSs58\n          }\n        }\n        fee\n        event: eventByEventId {\n          id\n          indexInBlock\n        }\n        block: blockByBlockId {\n          id\n          timestamp\n        }\n      }\n      aggregates {\n        sum {\n          depositValueUsd\n        }\n      }\n    }\n    block: blockByIssuedBlockId {\n      timestamp\n      id\n    }\n    event: eventByIssuedEventId {\n      id\n      indexInBlock\n    }\n  }\n"): (typeof documents)["\n  fragment LiquidityDepositChannelInfo on LiquidityDepositChannel {\n    id\n    asset\n    chain\n    depositAddress\n    channelId\n    lp: liquidityProviderByLiquidityProviderId {\n      account: accountByAccountId {\n        idSs58\n      }\n    }\n    sourceChainExpiryBlock\n    isExpired\n    deposits: liquidityDepositsByLiquidityDepositChannelId {\n      nodes {\n        depositAmount\n        lp: liquidityProviderByLiquidityProviderId {\n          account: accountByAccountId {\n            idSs58\n          }\n        }\n        fee\n        event: eventByEventId {\n          id\n          indexInBlock\n        }\n        block: blockByBlockId {\n          id\n          timestamp\n        }\n      }\n      aggregates {\n        sum {\n          depositValueUsd\n        }\n      }\n    }\n    block: blockByIssuedBlockId {\n      timestamp\n      id\n    }\n    event: eventByIssuedEventId {\n      id\n      indexInBlock\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetLiquidityDepositChannel(\n    $channelId: BigInt!\n    $chain: ChainflipChain!\n    $issuedBlockId: Int!\n  ) {\n    channels: allLiquidityDepositChannels(\n      condition: { channelId: $channelId, chain: $chain, issuedBlockId: $issuedBlockId }\n    ) {\n      nodes {\n        ...LiquidityDepositChannelInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetLiquidityDepositChannel(\n    $channelId: BigInt!\n    $chain: ChainflipChain!\n    $issuedBlockId: Int!\n  ) {\n    channels: allLiquidityDepositChannels(\n      condition: { channelId: $channelId, chain: $chain, issuedBlockId: $issuedBlockId }\n    ) {\n      nodes {\n        ...LiquidityDepositChannelInfo\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetCacheUndeployedLiquidity($lpIdSs58: String) {\n    depositBalances: allDepositBalances(condition: { lpIdSs58: $lpIdSs58 }) {\n      groupedAggregates(groupBy: ASSET) {\n        sum {\n          amount\n        }\n        keys\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCacheUndeployedLiquidity($lpIdSs58: String) {\n    depositBalances: allDepositBalances(condition: { lpIdSs58: $lpIdSs58 }) {\n      groupedAggregates(groupBy: ASSET) {\n        sum {\n          amount\n        }\n        keys\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetLastLiquidityDeposit($asset: ChainflipAsset!) {\n    deposits: allLiquidityDeposits(\n      orderBy: ID_DESC\n      first: 1\n      filter: { asset: { equalTo: $asset } }\n    ) {\n      nodes {\n        asset\n        block: blockByBlockId {\n          timestamp\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetLastLiquidityDeposit($asset: ChainflipAsset!) {\n    deposits: allLiquidityDeposits(\n      orderBy: ID_DESC\n      first: 1\n      filter: { asset: { equalTo: $asset } }\n    ) {\n      nodes {\n        asset\n        block: blockByBlockId {\n          timestamp\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetLastLiquidityDepositForAccount($asset: ChainflipAsset!, $lpIdSs58: String!) {\n    account: accountByIdSs58(idSs58: $lpIdSs58) {\n      lp: liquidityProviderByAccountId {\n        deposits: liquidityDepositsByLiquidityProviderId(\n          orderBy: ID_DESC\n          first: 1\n          filter: { asset: { equalTo: $asset } }\n        ) {\n          nodes {\n            asset\n            block: blockByBlockId {\n              timestamp\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetLastLiquidityDepositForAccount($asset: ChainflipAsset!, $lpIdSs58: String!) {\n    account: accountByIdSs58(idSs58: $lpIdSs58) {\n      lp: liquidityProviderByAccountId {\n        deposits: liquidityDepositsByLiquidityProviderId(\n          orderBy: ID_DESC\n          first: 1\n          filter: { asset: { equalTo: $asset } }\n        ) {\n          nodes {\n            asset\n            block: blockByBlockId {\n              timestamp\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment LpAccountWithBalances on LpAccount {\n    idSs58\n    alias\n    openOrders\n    balances: depositBalancesByLpIdSs58 {\n      nodes {\n        chain\n        asset\n        amount\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment LpAccountWithBalances on LpAccount {\n    idSs58\n    alias\n    openOrders\n    balances: depositBalancesByLpIdSs58 {\n      nodes {\n        chain\n        asset\n        amount\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment Pool on Pool {\n    id\n    baseAsset\n    quoteAsset\n    price\n  }\n"): (typeof documents)["\n  fragment Pool on Pool {\n    id\n    baseAsset\n    quoteAsset\n    price\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment LiquidityBalanceEvent on LiquidityBalanceEvent {\n    eventId\n    amount\n    asset\n    valueUsd\n    event: eventByEventId {\n      block: blockByBlockId {\n        id\n        timestamp\n      }\n      extrinsic: extrinsicByExtrinsicId {\n        indexInBlock\n        blockId\n      }\n      blockId\n      indexInBlock\n    }\n    depositChannel: liquidityDepositChannelByLiquidityDepositChannelId {\n      chain\n      channelId\n      issuedBlockId\n    }\n    broadcast: broadcastByBroadcastId {\n      id\n      broadcastSuccessEventId\n    }\n  }\n"): (typeof documents)["\n  fragment LiquidityBalanceEvent on LiquidityBalanceEvent {\n    eventId\n    amount\n    asset\n    valueUsd\n    event: eventByEventId {\n      block: blockByBlockId {\n        id\n        timestamp\n      }\n      extrinsic: extrinsicByExtrinsicId {\n        indexInBlock\n        blockId\n      }\n      blockId\n      indexInBlock\n    }\n    depositChannel: liquidityDepositChannelByLiquidityDepositChannelId {\n      chain\n      channelId\n      issuedBlockId\n    }\n    broadcast: broadcastByBroadcastId {\n      id\n      broadcastSuccessEventId\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetFilteredLpAccountsWithBalances($filter: String) {\n    lps: allLpAccounts(\n      filter: {\n        or: [\n          { idSs58: { includesInsensitive: $filter } }\n          { alias: { includesInsensitive: $filter } }\n        ]\n      }\n    ) {\n      totalCount\n      nodes {\n        ...LpAccountWithBalances\n      }\n    }\n    pools: allPools {\n      nodes {\n        ...Pool\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetFilteredLpAccountsWithBalances($filter: String) {\n    lps: allLpAccounts(\n      filter: {\n        or: [\n          { idSs58: { includesInsensitive: $filter } }\n          { alias: { includesInsensitive: $filter } }\n        ]\n      }\n    ) {\n      totalCount\n      nodes {\n        ...LpAccountWithBalances\n      }\n    }\n    pools: allPools {\n      nodes {\n        ...Pool\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetLpAcccountsWithCollectedFees($accountIds: [String!]!) {\n    allAccounts(filter: { idSs58: { in: $accountIds } }) {\n      nodes {\n        idSs58\n        lp: liquidityProviderByAccountId {\n          fees: collectedFeesByLiquidityProviderId {\n            aggregates {\n              sum {\n                valueUsd\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetLpAcccountsWithCollectedFees($accountIds: [String!]!) {\n    allAccounts(filter: { idSs58: { in: $accountIds } }) {\n      nodes {\n        idSs58\n        lp: liquidityProviderByAccountId {\n          fees: collectedFeesByLiquidityProviderId {\n            aggregates {\n              sum {\n                valueUsd\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getLiquidityBalanceChangeEvents($idSs58: String!, $first: Int, $offset: Int) {\n    account: accountByIdSs58(idSs58: $idSs58) {\n      lp: liquidityProviderByAccountId {\n        events: liquidityBalanceEventsByLiquidityProviderId(\n          orderBy: EVENT_ID_DESC\n          first: $first\n          offset: $offset\n        ) {\n          edges {\n            node {\n              ...LiquidityBalanceEvent\n            }\n          }\n          totalCount\n          pageInfo {\n            endCursor\n            hasNextPage\n            startCursor\n            hasPreviousPage\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getLiquidityBalanceChangeEvents($idSs58: String!, $first: Int, $offset: Int) {\n    account: accountByIdSs58(idSs58: $idSs58) {\n      lp: liquidityProviderByAccountId {\n        events: liquidityBalanceEventsByLiquidityProviderId(\n          orderBy: EVENT_ID_DESC\n          first: $first\n          offset: $offset\n        ) {\n          edges {\n            node {\n              ...LiquidityBalanceEvent\n            }\n          }\n          totalCount\n          pageInfo {\n            endCursor\n            hasNextPage\n            startCursor\n            hasPreviousPage\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment RefundAddresses on LiquidityProvider {\n    bitcoinRefundAddress\n    ethereumRefundAddress\n    polkadotRefundAddress\n  }\n"): (typeof documents)["\n  fragment RefundAddresses on LiquidityProvider {\n    bitcoinRefundAddress\n    ethereumRefundAddress\n    polkadotRefundAddress\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getLpAccountWithRefundAddresses($idSs58: String!) {\n    account: accountByIdSs58(idSs58: $idSs58) {\n      lp: liquidityProviderByAccountId {\n        ...RefundAddresses\n      }\n    }\n  }\n"): (typeof documents)["\n  query getLpAccountWithRefundAddresses($idSs58: String!) {\n    account: accountByIdSs58(idSs58: $idSs58) {\n      lp: liquidityProviderByAccountId {\n        ...RefundAddresses\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PoolOrderEvent on PoolOrderEvent {\n    id\n    eventType\n    orderType\n    baseAmount\n    baseAsset\n    quoteAmount\n    maximumRate\n    minimumRate\n    timestamp\n    lp: liquidityProviderByLiquidityProviderId {\n      account: accountByAccountId {\n        idSs58\n      }\n    }\n    event: eventByEventId {\n      indexInBlock\n      blockId\n    }\n  }\n"): (typeof documents)["\n  fragment PoolOrderEvent on PoolOrderEvent {\n    id\n    eventType\n    orderType\n    baseAmount\n    baseAsset\n    quoteAmount\n    maximumRate\n    minimumRate\n    timestamp\n    lp: liquidityProviderByLiquidityProviderId {\n      account: accountByAccountId {\n        idSs58\n      }\n    }\n    event: eventByEventId {\n      indexInBlock\n      blockId\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPoolActivity(\n    $baseAsset: ChainflipAsset!\n    $first: Int\n    $last: Int\n    $after: Cursor\n    $before: Cursor\n  ) {\n    poolOrders: allPoolOrderEvents(\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n      orderBy: ID_DESC\n      filter: {\n        baseAsset: { equalTo: $baseAsset }\n        or: [{ quoteAmount: { notEqualTo: \"0\" } }, { baseAmount: { notEqualTo: \"0\" } }]\n      }\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n      edges {\n        node {\n          ...PoolOrderEvent\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPoolActivity(\n    $baseAsset: ChainflipAsset!\n    $first: Int\n    $last: Int\n    $after: Cursor\n    $before: Cursor\n  ) {\n    poolOrders: allPoolOrderEvents(\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n      orderBy: ID_DESC\n      filter: {\n        baseAsset: { equalTo: $baseAsset }\n        or: [{ quoteAmount: { notEqualTo: \"0\" } }, { baseAmount: { notEqualTo: \"0\" } }]\n      }\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n      edges {\n        node {\n          ...PoolOrderEvent\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPoolAggregates {\n    poolSwaps: allPoolSwaps {\n      groupedAggregates(groupBy: [FROM_ASSET, TO_ASSET]) {\n        fromAssetToAsset: keys\n        sum {\n          toValueUsd\n          liquidityFeeValueUsd\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPoolAggregates {\n    poolSwaps: allPoolSwaps {\n      groupedAggregates(groupBy: [FROM_ASSET, TO_ASSET]) {\n        fromAssetToAsset: keys\n        sum {\n          toValueUsd\n          liquidityFeeValueUsd\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPoolAggregatesByDate($startingTimestamp: Datetime!, $endingTimestamp: Datetime) {\n    poolSwaps: allPoolSwaps(\n      filter: {\n        assetSwappedBlockTimestamp: {\n          greaterThanOrEqualTo: $startingTimestamp\n          lessThanOrEqualTo: $endingTimestamp\n        }\n      }\n    ) {\n      groupedAggregates(groupBy: [FROM_ASSET, TO_ASSET]) {\n        fromAssetToAsset: keys\n        sum {\n          toValueUsd\n          liquidityFeeValueUsd\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPoolAggregatesByDate($startingTimestamp: Datetime!, $endingTimestamp: Datetime) {\n    poolSwaps: allPoolSwaps(\n      filter: {\n        assetSwappedBlockTimestamp: {\n          greaterThanOrEqualTo: $startingTimestamp\n          lessThanOrEqualTo: $endingTimestamp\n        }\n      }\n    ) {\n      groupedAggregates(groupBy: [FROM_ASSET, TO_ASSET]) {\n        fromAssetToAsset: keys\n        sum {\n          toValueUsd\n          liquidityFeeValueUsd\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPoolAggregatesByDateTruncatedToHour(\n    $startingTimestamp: Datetime!\n    $endingTimestamp: Datetime\n  ) {\n    poolSwaps: allPoolSwaps(\n      filter: {\n        assetSwappedBlockTimestamp: {\n          greaterThanOrEqualTo: $startingTimestamp\n          lessThanOrEqualTo: $endingTimestamp\n        }\n      }\n    ) {\n      groupedAggregates(\n        groupBy: [FROM_ASSET, TO_ASSET, ASSET_SWAPPED_BLOCK_TIMESTAMP_TRUNCATED_TO_HOUR]\n      ) {\n        fromAssetToAssetDate: keys\n        sum {\n          toValueUsd\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPoolAggregatesByDateTruncatedToHour(\n    $startingTimestamp: Datetime!\n    $endingTimestamp: Datetime\n  ) {\n    poolSwaps: allPoolSwaps(\n      filter: {\n        assetSwappedBlockTimestamp: {\n          greaterThanOrEqualTo: $startingTimestamp\n          lessThanOrEqualTo: $endingTimestamp\n        }\n      }\n    ) {\n      groupedAggregates(\n        groupBy: [FROM_ASSET, TO_ASSET, ASSET_SWAPPED_BLOCK_TIMESTAMP_TRUNCATED_TO_HOUR]\n      ) {\n        fromAssetToAssetDate: keys\n        sum {\n          toValueUsd\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetEnvironmentAddress {\n    environmentAddress: environmentAddressById(id: 1) {\n      keyManagerAddress\n      stateChainGatewayAddress\n    }\n  }\n"): (typeof documents)["\n  query GetEnvironmentAddress {\n    environmentAddress: environmentAddressById(id: 1) {\n      keyManagerAddress\n      stateChainGatewayAddress\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetValidatorByIdSs58($validatorId: String!) {\n    validators: allValidators(condition: { idSs58: $validatorId }) {\n      nodes {\n        ...CacheValidator\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetValidatorByIdSs58($validatorId: String!) {\n    validators: allValidators(condition: { idSs58: $validatorId }) {\n      nodes {\n        ...CacheValidator\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetActiveCacheValidators {\n    validators: allValidators(\n      filter: {\n        or: [{ isCurrentAuthority: { equalTo: true } }, { isCurrentBackup: { equalTo: true } }]\n      }\n    ) {\n      nodes {\n        ...CacheValidator\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetActiveCacheValidators {\n    validators: allValidators(\n      filter: {\n        or: [{ isCurrentAuthority: { equalTo: true } }, { isCurrentBackup: { equalTo: true } }]\n      }\n    ) {\n      nodes {\n        ...CacheValidator\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetAllSwaps($first: Int, $offset: Int, $destinationAddress: String) {\n    allSwaps(\n      orderBy: ID_DESC\n      offset: $offset\n      first: $first\n      filter: { destinationAddress: { includesInsensitive: $destinationAddress } }\n    ) {\n      pageInfo {\n        hasPreviousPage\n        startCursor\n        hasNextPage\n        endCursor\n      }\n      edges {\n        node {\n          ...Swap\n        }\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query GetAllSwaps($first: Int, $offset: Int, $destinationAddress: String) {\n    allSwaps(\n      orderBy: ID_DESC\n      offset: $offset\n      first: $first\n      filter: { destinationAddress: { includesInsensitive: $destinationAddress } }\n    ) {\n      pageInfo {\n        hasPreviousPage\n        startCursor\n        hasNextPage\n        endCursor\n      }\n      edges {\n        node {\n          ...Swap\n        }\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetSwapByNativeId($nativeId: BigInt!) {\n    swap: swapByNativeId(nativeId: $nativeId) {\n      ...Swap\n    }\n  }\n"): (typeof documents)["\n  query GetSwapByNativeId($nativeId: BigInt!) {\n    swap: swapByNativeId(nativeId: $nativeId) {\n      ...Swap\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetAllSwapsByAsset($first: Int, $offset: Int, $baseAsset: ChainflipAsset!) {\n    allSwaps(\n      filter: {\n        or: [\n          { sourceAsset: { equalTo: $baseAsset } }\n          { destinationAsset: { equalTo: $baseAsset } }\n        ]\n      }\n      orderBy: ID_DESC\n      offset: $offset\n      first: $first\n    ) {\n      pageInfo {\n        hasPreviousPage\n        startCursor\n        hasNextPage\n        endCursor\n      }\n      edges {\n        node {\n          ...Swap\n        }\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query GetAllSwapsByAsset($first: Int, $offset: Int, $baseAsset: ChainflipAsset!) {\n    allSwaps(\n      filter: {\n        or: [\n          { sourceAsset: { equalTo: $baseAsset } }\n          { destinationAsset: { equalTo: $baseAsset } }\n        ]\n      }\n      orderBy: ID_DESC\n      offset: $offset\n      first: $first\n    ) {\n      pageInfo {\n        hasPreviousPage\n        startCursor\n        hasNextPage\n        endCursor\n      }\n      edges {\n        node {\n          ...Swap\n        }\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetSwapAggregates(\n    $minSwapScheduledTimestamp: Datetime! = \"2013-01-01T00:00:00.000Z\"\n    $maxSwapScheduledTimestamp: Datetime\n  ) {\n    oneHopSwaps: allSwaps(\n      filter: {\n        and: [\n          { intermediateAmount: { isNull: true } }\n          {\n            swapScheduledBlockTimestamp: {\n              greaterThanOrEqualTo: $minSwapScheduledTimestamp\n              lessThanOrEqualTo: $maxSwapScheduledTimestamp\n            }\n          }\n        ]\n      }\n    ) {\n      aggregatesBySourceAsset: groupedAggregates(\n        groupBy: [SOURCE_ASSET, SWAP_SCHEDULED_BLOCK_TIMESTAMP_TRUNCATED_TO_HOUR]\n      ) {\n        ...SwapAggregatesFragment\n      }\n      aggregatesByDestAsset: groupedAggregates(\n        groupBy: [DESTINATION_ASSET, SWAP_SCHEDULED_BLOCK_TIMESTAMP_TRUNCATED_TO_HOUR]\n      ) {\n        ...SwapAggregatesFragment\n      }\n    }\n    twoHopSwaps: allSwaps(\n      filter: {\n        and: [\n          { intermediateAmount: { isNull: false } }\n          {\n            swapScheduledBlockTimestamp: {\n              greaterThanOrEqualTo: $minSwapScheduledTimestamp\n              lessThanOrEqualTo: $maxSwapScheduledTimestamp\n            }\n          }\n        ]\n      }\n    ) {\n      aggregatesBySourceAsset: groupedAggregates(\n        groupBy: [SOURCE_ASSET, SWAP_SCHEDULED_BLOCK_TIMESTAMP_TRUNCATED_TO_HOUR]\n      ) {\n        ...SwapAggregatesFragment\n      }\n      aggregatesByDestAsset: groupedAggregates(\n        groupBy: [DESTINATION_ASSET, SWAP_SCHEDULED_BLOCK_TIMESTAMP_TRUNCATED_TO_HOUR]\n      ) {\n        ...SwapAggregatesFragment\n      }\n    }\n  }\n\n  fragment SwapAggregatesFragment on SwapAggregates {\n    assetAndHour: keys\n    distinctCount {\n      id\n    }\n  }\n"): (typeof documents)["\n  query GetSwapAggregates(\n    $minSwapScheduledTimestamp: Datetime! = \"2013-01-01T00:00:00.000Z\"\n    $maxSwapScheduledTimestamp: Datetime\n  ) {\n    oneHopSwaps: allSwaps(\n      filter: {\n        and: [\n          { intermediateAmount: { isNull: true } }\n          {\n            swapScheduledBlockTimestamp: {\n              greaterThanOrEqualTo: $minSwapScheduledTimestamp\n              lessThanOrEqualTo: $maxSwapScheduledTimestamp\n            }\n          }\n        ]\n      }\n    ) {\n      aggregatesBySourceAsset: groupedAggregates(\n        groupBy: [SOURCE_ASSET, SWAP_SCHEDULED_BLOCK_TIMESTAMP_TRUNCATED_TO_HOUR]\n      ) {\n        ...SwapAggregatesFragment\n      }\n      aggregatesByDestAsset: groupedAggregates(\n        groupBy: [DESTINATION_ASSET, SWAP_SCHEDULED_BLOCK_TIMESTAMP_TRUNCATED_TO_HOUR]\n      ) {\n        ...SwapAggregatesFragment\n      }\n    }\n    twoHopSwaps: allSwaps(\n      filter: {\n        and: [\n          { intermediateAmount: { isNull: false } }\n          {\n            swapScheduledBlockTimestamp: {\n              greaterThanOrEqualTo: $minSwapScheduledTimestamp\n              lessThanOrEqualTo: $maxSwapScheduledTimestamp\n            }\n          }\n        ]\n      }\n    ) {\n      aggregatesBySourceAsset: groupedAggregates(\n        groupBy: [SOURCE_ASSET, SWAP_SCHEDULED_BLOCK_TIMESTAMP_TRUNCATED_TO_HOUR]\n      ) {\n        ...SwapAggregatesFragment\n      }\n      aggregatesByDestAsset: groupedAggregates(\n        groupBy: [DESTINATION_ASSET, SWAP_SCHEDULED_BLOCK_TIMESTAMP_TRUNCATED_TO_HOUR]\n      ) {\n        ...SwapAggregatesFragment\n      }\n    }\n  }\n\n  fragment SwapAggregatesFragment on SwapAggregates {\n    assetAndHour: keys\n    distinctCount {\n      id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ChannelInfo on SwapChannel {\n    id\n    channelId\n    depositAddress\n    destinationAddress\n    destinationChain\n    # TODO(mainnet): remove this\n    expiryBlockId\n    issuedEventId\n    sourceChain\n    sourceAsset\n    destinationChain\n    destinationAsset\n    brokerCommissionRate\n    isExpired\n    sourceChainExpiryBlock\n    issuedBlock: blockByIssuedBlockId {\n      id\n      timestamp\n    }\n    issuedEvent: eventByIssuedEventId {\n      indexInBlock\n    }\n    expiryEvent: eventByExpiryEventId {\n      indexInBlock\n      block: blockByBlockId {\n        timestamp\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment ChannelInfo on SwapChannel {\n    id\n    channelId\n    depositAddress\n    destinationAddress\n    destinationChain\n    # TODO(mainnet): remove this\n    expiryBlockId\n    issuedEventId\n    sourceChain\n    sourceAsset\n    destinationChain\n    destinationAsset\n    brokerCommissionRate\n    isExpired\n    sourceChainExpiryBlock\n    issuedBlock: blockByIssuedBlockId {\n      id\n      timestamp\n    }\n    issuedEvent: eventByIssuedEventId {\n      indexInBlock\n    }\n    expiryEvent: eventByExpiryEventId {\n      indexInBlock\n      block: blockByBlockId {\n        timestamp\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetSwapChannelData(\n    $channelId: BigInt!\n    $sourceChain: ChainflipChain!\n    $issuedBlockId: Int!\n  ) {\n    channel: swapChannelByIssuedBlockIdAndSourceChainAndChannelId(\n      channelId: $channelId\n      issuedBlockId: $issuedBlockId\n      sourceChain: $sourceChain\n    ) {\n      ...ChannelInfo\n      ignoredDeposits: ignoredDepositsBySwapDepositChannelId(orderBy: EVENT_ID_DESC) {\n        nodes {\n          id\n          amount\n          reason\n          event: eventByEventId {\n            id\n            indexInBlock\n            block: blockByBlockId {\n              id\n              timestamp\n            }\n          }\n        }\n      }\n      broker: brokerByBrokerId {\n        account: accountByAccountId {\n          idSs58\n        }\n      }\n      swaps: swapsByDepositChannelId(orderBy: NATIVE_ID_DESC) {\n        nodes {\n          destinationAsset\n          nativeId\n          sourceAsset\n          depositAmount\n          depositValueUsd\n          egressAmount\n          egressValueUsd\n          swapScheduledBlockTimestamp\n          intermediateAmount\n          intermediateValueUsd\n          executedEvent: eventBySwapExecutedEventId {\n            block: blockByBlockId {\n              timestamp\n            }\n          }\n          swapFeesBySwapId {\n            nodes {\n              ...SwapFee\n            }\n          }\n        }\n      }\n    }\n    lastBlock: allBlocks(last: 1) {\n      nodes {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSwapChannelData(\n    $channelId: BigInt!\n    $sourceChain: ChainflipChain!\n    $issuedBlockId: Int!\n  ) {\n    channel: swapChannelByIssuedBlockIdAndSourceChainAndChannelId(\n      channelId: $channelId\n      issuedBlockId: $issuedBlockId\n      sourceChain: $sourceChain\n    ) {\n      ...ChannelInfo\n      ignoredDeposits: ignoredDepositsBySwapDepositChannelId(orderBy: EVENT_ID_DESC) {\n        nodes {\n          id\n          amount\n          reason\n          event: eventByEventId {\n            id\n            indexInBlock\n            block: blockByBlockId {\n              id\n              timestamp\n            }\n          }\n        }\n      }\n      broker: brokerByBrokerId {\n        account: accountByAccountId {\n          idSs58\n        }\n      }\n      swaps: swapsByDepositChannelId(orderBy: NATIVE_ID_DESC) {\n        nodes {\n          destinationAsset\n          nativeId\n          sourceAsset\n          depositAmount\n          depositValueUsd\n          egressAmount\n          egressValueUsd\n          swapScheduledBlockTimestamp\n          intermediateAmount\n          intermediateValueUsd\n          executedEvent: eventBySwapExecutedEventId {\n            block: blockByBlockId {\n              timestamp\n            }\n          }\n          swapFeesBySwapId {\n            nodes {\n              ...SwapFee\n            }\n          }\n        }\n      }\n    }\n    lastBlock: allBlocks(last: 1) {\n      nodes {\n        id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment OpenChannel on SwapChannel {\n    brokerCommissionRate\n    channelId\n    destinationAddress\n    destinationAsset\n    destinationChain\n    sourceAsset\n    sourceChain\n    issuedEvent: eventByIssuedEventId {\n      indexInBlock\n      block: blockByBlockId {\n        id\n        timestamp\n      }\n    }\n    broker: brokerByBrokerId {\n      account: accountByAccountId {\n        idSs58\n        alias\n      }\n    }\n    swaps: swapsByDepositChannelId {\n      aggregates {\n        sum {\n          egressValueUsd\n          intermediateValueUsd\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment OpenChannel on SwapChannel {\n    brokerCommissionRate\n    channelId\n    destinationAddress\n    destinationAsset\n    destinationChain\n    sourceAsset\n    sourceChain\n    issuedEvent: eventByIssuedEventId {\n      indexInBlock\n      block: blockByBlockId {\n        id\n        timestamp\n      }\n    }\n    broker: brokerByBrokerId {\n      account: accountByAccountId {\n        idSs58\n        alias\n      }\n    }\n    swaps: swapsByDepositChannelId {\n      aggregates {\n        sum {\n          egressValueUsd\n          intermediateValueUsd\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetOpenSwapChannels($first: Int!, $offset: Int) {\n    channels: allSwapChannels(\n      condition: { isExpired: false }\n      orderBy: ISSUED_EVENT_ID_DESC\n      offset: $offset\n      first: $first\n    ) {\n      pageInfo {\n        hasPreviousPage\n        startCursor\n        hasNextPage\n        endCursor\n      }\n      edges {\n        node {\n          ...OpenChannel\n        }\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query GetOpenSwapChannels($first: Int!, $offset: Int) {\n    channels: allSwapChannels(\n      condition: { isExpired: false }\n      orderBy: ISSUED_EVENT_ID_DESC\n      offset: $offset\n      first: $first\n    ) {\n      pageInfo {\n        hasPreviousPage\n        startCursor\n        hasNextPage\n        endCursor\n      }\n      edges {\n        node {\n          ...OpenChannel\n        }\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment BrokerSwapChannel on SwapChannel {\n    ...OpenChannel\n    isExpired\n  }\n"): (typeof documents)["\n  fragment BrokerSwapChannel on SwapChannel {\n    ...OpenChannel\n    isExpired\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetSwapChannelsByBrokerId($idSs58: String!, $first: Int, $offset: Int) {\n    account: accountByIdSs58(idSs58: $idSs58) {\n      broker: brokerByAccountId {\n        channels: swapChannelsByBrokerId(\n          orderBy: ISSUED_EVENT_ID_DESC\n          offset: $offset\n          first: $first\n        ) {\n          totalCount\n          edges {\n            node {\n              ...BrokerSwapChannel\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSwapChannelsByBrokerId($idSs58: String!, $first: Int, $offset: Int) {\n    account: accountByIdSs58(idSs58: $idSs58) {\n      broker: brokerByAccountId {\n        channels: swapChannelsByBrokerId(\n          orderBy: ISSUED_EVENT_ID_DESC\n          offset: $offset\n          first: $first\n        ) {\n          totalCount\n          edges {\n            node {\n              ...BrokerSwapChannel\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SwapInfo on Swap {\n    nativeId\n    sourceAsset\n    sourceChain\n    destinationAsset\n    destinationChain\n    destinationAddress\n    depositAmount\n    depositValueUsd\n    egressAmount\n    egressValueUsd\n    intermediateAmount\n    intermediateValueUsd\n    ccmMessage\n    egressIgnoredEventId\n    ccmDepositReceivedEvent: eventByCcmDepositReceivedEventId {\n      indexInBlock\n      block: blockByBlockId {\n        id\n        timestamp\n      }\n    }\n    scheduledEvent: eventBySwapScheduledEventId {\n      indexInBlock\n      args\n      block: blockByBlockId {\n        id\n        timestamp\n      }\n    }\n    executedEvent: eventBySwapExecutedEventId {\n      indexInBlock\n      block: blockByBlockId {\n        id\n        timestamp\n      }\n    }\n    egressScheduledEvent: eventByEgressScheduledEventId {\n      indexInBlock\n      block: blockByBlockId {\n        id\n        timestamp\n      }\n    }\n    egressIgnoredEvent: eventByEgressIgnoredEventId {\n      indexInBlock\n      block: blockByBlockId {\n        id\n        timestamp\n      }\n    }\n    broadcast: broadcastByBroadcastId {\n      broadcastRequestedEventId\n      broadcastAbortedEventId\n      broadcastSuccessEventId\n      successEvent: eventByBroadcastSuccessEventId {\n        indexInBlock\n        block: blockByBlockId {\n          id\n          timestamp\n        }\n      }\n      requestedEvent: eventByBroadcastRequestedEventId {\n        indexInBlock\n        block: blockByBlockId {\n          id\n          timestamp\n        }\n      }\n      abortedEvent: eventByBroadcastAbortedEventId {\n        indexInBlock\n        block: blockByBlockId {\n          id\n          timestamp\n        }\n      }\n      transactionPayload\n    }\n    channel: swapChannelByDepositChannelId {\n      ...ChannelInfo\n    }\n    swapFeesBySwapId {\n      edges {\n        node {\n          ...SwapFee\n        }\n      }\n    }\n    error: stateChainErrorByStateChainErrorId {\n      name\n      docs\n    }\n  }\n"): (typeof documents)["\n  fragment SwapInfo on Swap {\n    nativeId\n    sourceAsset\n    sourceChain\n    destinationAsset\n    destinationChain\n    destinationAddress\n    depositAmount\n    depositValueUsd\n    egressAmount\n    egressValueUsd\n    intermediateAmount\n    intermediateValueUsd\n    ccmMessage\n    egressIgnoredEventId\n    ccmDepositReceivedEvent: eventByCcmDepositReceivedEventId {\n      indexInBlock\n      block: blockByBlockId {\n        id\n        timestamp\n      }\n    }\n    scheduledEvent: eventBySwapScheduledEventId {\n      indexInBlock\n      args\n      block: blockByBlockId {\n        id\n        timestamp\n      }\n    }\n    executedEvent: eventBySwapExecutedEventId {\n      indexInBlock\n      block: blockByBlockId {\n        id\n        timestamp\n      }\n    }\n    egressScheduledEvent: eventByEgressScheduledEventId {\n      indexInBlock\n      block: blockByBlockId {\n        id\n        timestamp\n      }\n    }\n    egressIgnoredEvent: eventByEgressIgnoredEventId {\n      indexInBlock\n      block: blockByBlockId {\n        id\n        timestamp\n      }\n    }\n    broadcast: broadcastByBroadcastId {\n      broadcastRequestedEventId\n      broadcastAbortedEventId\n      broadcastSuccessEventId\n      successEvent: eventByBroadcastSuccessEventId {\n        indexInBlock\n        block: blockByBlockId {\n          id\n          timestamp\n        }\n      }\n      requestedEvent: eventByBroadcastRequestedEventId {\n        indexInBlock\n        block: blockByBlockId {\n          id\n          timestamp\n        }\n      }\n      abortedEvent: eventByBroadcastAbortedEventId {\n        indexInBlock\n        block: blockByBlockId {\n          id\n          timestamp\n        }\n      }\n      transactionPayload\n    }\n    channel: swapChannelByDepositChannelId {\n      ...ChannelInfo\n    }\n    swapFeesBySwapId {\n      edges {\n        node {\n          ...SwapFee\n        }\n      }\n    }\n    error: stateChainErrorByStateChainErrorId {\n      name\n      docs\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SwapFee on SwapFee {\n    valueUsd\n    amount\n    asset\n    type\n  }\n"): (typeof documents)["\n  fragment SwapFee on SwapFee {\n    valueUsd\n    amount\n    asset\n    type\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetSwapDataByNativeId($nativeId: BigInt!) {\n    swap: swapByNativeId(nativeId: $nativeId) {\n      ...SwapInfo\n    }\n  }\n"): (typeof documents)["\n  query GetSwapDataByNativeId($nativeId: BigInt!) {\n    swap: swapByNativeId(nativeId: $nativeId) {\n      ...SwapInfo\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getLastDeposits($idSs58: String!) {\n    account: accountByIdSs58(idSs58: $idSs58) {\n      lp: liquidityProviderByAccountId {\n        deposits: liquidityDepositsByLiquidityProviderId(first: 3, orderBy: ID_DESC) {\n          nodes {\n            id\n            depositAmount\n            channel: liquidityDepositChannelByLiquidityDepositChannelId {\n              asset\n              chain\n              issuedBlockId\n              channelId\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getLastDeposits($idSs58: String!) {\n    account: accountByIdSs58(idSs58: $idSs58) {\n      lp: liquidityProviderByAccountId {\n        deposits: liquidityDepositsByLiquidityProviderId(first: 3, orderBy: ID_DESC) {\n          nodes {\n            id\n            depositAmount\n            channel: liquidityDepositChannelByLiquidityDepositChannelId {\n              asset\n              chain\n              issuedBlockId\n              channelId\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getDepositsForSpecificLiquidityDepositChannel(\n    $channelId: BigInt\n    $chain: ChainflipChain\n    $issuedBlockId: Int\n  ) {\n    channels: allLiquidityDepositChannels(\n      condition: { channelId: $channelId, chain: $chain, issuedBlockId: $issuedBlockId }\n      orderBy: ID_DESC\n      first: 1\n    ) {\n      nodes {\n        id\n        asset\n        chain\n        channelId\n        deposits: liquidityDepositsByLiquidityDepositChannelId {\n          nodes {\n            depositAmount\n            event: eventByEventId {\n              blockId\n              indexInBlock\n            }\n          }\n        }\n        depositAddress\n      }\n    }\n  }\n"): (typeof documents)["\n  query getDepositsForSpecificLiquidityDepositChannel(\n    $channelId: BigInt\n    $chain: ChainflipChain\n    $issuedBlockId: Int\n  ) {\n    channels: allLiquidityDepositChannels(\n      condition: { channelId: $channelId, chain: $chain, issuedBlockId: $issuedBlockId }\n      orderBy: ID_DESC\n      first: 1\n    ) {\n      nodes {\n        id\n        asset\n        chain\n        channelId\n        deposits: liquidityDepositsByLiquidityDepositChannelId {\n          nodes {\n            depositAmount\n            event: eventByEventId {\n              blockId\n              indexInBlock\n            }\n          }\n        }\n        depositAddress\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getCollectedFees($idSs58: String!, $baseAsset: ChainflipAsset) {\n    account: accountByIdSs58(idSs58: $idSs58) {\n      lp: liquidityProviderByAccountId {\n        poolOrderEvents: poolOrdersByLiquidityProviderId(condition: { baseAsset: $baseAsset }) {\n          aggregates {\n            sum {\n              baseCollectedFeesUsd\n              quoteCollectedFeesUsd\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getCollectedFees($idSs58: String!, $baseAsset: ChainflipAsset) {\n    account: accountByIdSs58(idSs58: $idSs58) {\n      lp: liquidityProviderByAccountId {\n        poolOrderEvents: poolOrdersByLiquidityProviderId(condition: { baseAsset: $baseAsset }) {\n          aggregates {\n            sum {\n              baseCollectedFeesUsd\n              quoteCollectedFeesUsd\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getSpecificPoolSwapsData(\n    $date24HoursAgo: Datetime!\n    $date48HoursAgo: Datetime!\n    $baseAsset: ChainflipAsset!\n    $quoteAsset: ChainflipAsset!\n  ) {\n    currentDayAggregates: allPoolSwaps(\n      filter: {\n        assetSwappedBlockTimestamp: { greaterThanOrEqualTo: $date24HoursAgo }\n        fromAsset: { in: [$baseAsset, $quoteAsset] }\n        toAsset: { in: [$baseAsset, $quoteAsset] }\n      }\n    ) {\n      groupedAggregates(groupBy: [FROM_ASSET, TO_ASSET]) {\n        fromAssetToAsset: keys\n        sum {\n          toValueUsd\n          liquidityFeeValueUsd\n        }\n        distinctCount {\n          assetSwappedEventId\n        }\n      }\n    }\n    previousDayAggregates: allPoolSwaps(\n      filter: {\n        assetSwappedBlockTimestamp: {\n          greaterThanOrEqualTo: $date48HoursAgo\n          lessThan: $date24HoursAgo\n        }\n        fromAsset: { in: [$baseAsset, $quoteAsset] }\n        toAsset: { in: [$baseAsset, $quoteAsset] }\n      }\n    ) {\n      groupedAggregates(groupBy: [FROM_ASSET, TO_ASSET]) {\n        fromAssetToAsset: keys\n        sum {\n          toValueUsd\n          liquidityFeeValueUsd\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getSpecificPoolSwapsData(\n    $date24HoursAgo: Datetime!\n    $date48HoursAgo: Datetime!\n    $baseAsset: ChainflipAsset!\n    $quoteAsset: ChainflipAsset!\n  ) {\n    currentDayAggregates: allPoolSwaps(\n      filter: {\n        assetSwappedBlockTimestamp: { greaterThanOrEqualTo: $date24HoursAgo }\n        fromAsset: { in: [$baseAsset, $quoteAsset] }\n        toAsset: { in: [$baseAsset, $quoteAsset] }\n      }\n    ) {\n      groupedAggregates(groupBy: [FROM_ASSET, TO_ASSET]) {\n        fromAssetToAsset: keys\n        sum {\n          toValueUsd\n          liquidityFeeValueUsd\n        }\n        distinctCount {\n          assetSwappedEventId\n        }\n      }\n    }\n    previousDayAggregates: allPoolSwaps(\n      filter: {\n        assetSwappedBlockTimestamp: {\n          greaterThanOrEqualTo: $date48HoursAgo\n          lessThan: $date24HoursAgo\n        }\n        fromAsset: { in: [$baseAsset, $quoteAsset] }\n        toAsset: { in: [$baseAsset, $quoteAsset] }\n      }\n    ) {\n      groupedAggregates(groupBy: [FROM_ASSET, TO_ASSET]) {\n        fromAssetToAsset: keys\n        sum {\n          toValueUsd\n          liquidityFeeValueUsd\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query BannerStatus($app: App!) {\n    banner: allBanners(filter: { or: [{ app: { equalTo: $app } }, { app: { equalTo: ALL } }] }) {\n      nodes {\n        message\n        type\n      }\n    }\n  }\n"): (typeof documents)["\n  query BannerStatus($app: App!) {\n    banner: allBanners(filter: { or: [{ app: { equalTo: $app } }, { app: { equalTo: ALL } }] }) {\n      nodes {\n        message\n        type\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CacheValidator on Validator {\n    idHex\n    idSs58\n    alias\n    apyBp\n    boundRedeemAddress\n    processorId\n    totalRewards\n    isCurrentAuthority\n    isCurrentBackup\n    isQualified\n    isOnline\n    isBidding\n    isKeyholder\n    reputationPoints\n    lockedBalance\n    unlockedBalance\n    firstFundingTimestamp\n    latestFundingTimestamp\n  }\n"): (typeof documents)["\n  fragment CacheValidator on Validator {\n    idHex\n    idSs58\n    alias\n    apyBp\n    boundRedeemAddress\n    processorId\n    totalRewards\n    isCurrentAuthority\n    isCurrentBackup\n    isQualified\n    isOnline\n    isBidding\n    isKeyholder\n    reputationPoints\n    lockedBalance\n    unlockedBalance\n    firstFundingTimestamp\n    latestFundingTimestamp\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetMarketData($asset: ChainflipAsset!, $numberOfDays: Int!) {\n    marketData(asset: $asset, numberOfDays: $numberOfDays) {\n      candlesticks {\n        ... on CandlestickData {\n          time\n          open\n          low\n          high\n          close\n        }\n        ... on WhitespaceData {\n          time\n        }\n      }\n      volumes {\n        ... on HistogramData {\n          value\n          time\n        }\n        ... on WhitespaceData {\n          time\n        }\n      }\n      prices {\n        time\n        value\n      }\n      globalVolume\n    }\n  }\n"): (typeof documents)["\n  query GetMarketData($asset: ChainflipAsset!, $numberOfDays: Int!) {\n    marketData(asset: $asset, numberOfDays: $numberOfDays) {\n      candlesticks {\n        ... on CandlestickData {\n          time\n          open\n          low\n          high\n          close\n        }\n        ... on WhitespaceData {\n          time\n        }\n      }\n      volumes {\n        ... on HistogramData {\n          value\n          time\n        }\n        ... on WhitespaceData {\n          time\n        }\n      }\n      prices {\n        time\n        value\n      }\n      globalVolume\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetChainTrackingQuery {\n    allChainTrackings {\n      nodes {\n        chain\n        height\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetChainTrackingQuery {\n    allChainTrackings {\n      nodes {\n        chain\n        height\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetLatestAuction {\n    auction: auctionById(id: 1) {\n      minActiveBid\n      startBlockNumber\n      endBlockNumber\n      currentHeight\n      projectedLockup\n      redemptionPeriodAsPercentage\n      targetSetSize\n    }\n  }\n"): (typeof documents)["\n  query GetLatestAuction {\n    auction: auctionById(id: 1) {\n      minActiveBid\n      startBlockNumber\n      endBlockNumber\n      currentHeight\n      projectedLockup\n      redemptionPeriodAsPercentage\n      targetSetSize\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetLatestEpochs($limit: Int!) {\n    latestEpoch: allEpoches(first: $limit, orderBy: ID_DESC) {\n      nodes {\n        ...EpochWithRotation\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetLatestEpochs($limit: Int!) {\n    latestEpoch: allEpoches(first: $limit, orderBy: ID_DESC) {\n      nodes {\n        ...EpochWithRotation\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getPendingDeposits($address: String!, $chain: String!, $asset: String!) {\n    pendingDeposits(input: { address: $address, chain: $chain, asset: $asset }) {\n      amount\n    }\n  }\n"): (typeof documents)["\n  query getPendingDeposits($address: String!, $chain: String!, $asset: String!) {\n    pendingDeposits(input: { address: $address, chain: $chain, asset: $asset }) {\n      amount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getLpCollectedFees($idSs58: String!) {\n    account: accountByIdSs58(idSs58: $idSs58) {\n      lp: liquidityProviderByAccountId {\n        collectedFees: collectedFeesByLiquidityProviderId {\n          aggregates {\n            sum {\n              valueUsd\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getLpCollectedFees($idSs58: String!) {\n    account: accountByIdSs58(idSs58: $idSs58) {\n      lp: liquidityProviderByAccountId {\n        collectedFees: collectedFeesByLiquidityProviderId {\n          aggregates {\n            sum {\n              valueUsd\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getAllLpsCollectedFees {\n    allCollectedFees {\n      aggregates {\n        sum {\n          valueUsd\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getAllLpsCollectedFees {\n    allCollectedFees {\n      aggregates {\n        sum {\n          valueUsd\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getOpenPoolOrders($idSs58: String!) {\n    lpAccountByIdSs58(idSs58: $idSs58) {\n      openOrders\n    }\n  }\n"): (typeof documents)["\n  query getOpenPoolOrders($idSs58: String!) {\n    lpAccountByIdSs58(idSs58: $idSs58) {\n      openOrders\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getTradeHistoryByAccount($first: Int!, $idSs58: String!) {\n    account: accountByIdSs58(idSs58: $idSs58) {\n      lp: liquidityProviderByAccountId {\n        tradeHistory: poolOrdersByLiquidityProviderId(\n          orderBy: ID_DESC\n          first: $first\n          filter: {\n            or: [\n              {\n                orderType: { equalTo: LIMIT }\n                or: [\n                  { filledBaseAmount: { notEqualTo: \"0\" } }\n                  { filledQuoteAmount: { notEqualTo: \"0\" } }\n                ]\n              }\n              {\n                orderType: { equalTo: RANGE }\n                or: [\n                  { baseCollectedFees: { notEqualTo: \"0\" } }\n                  { quoteCollectedFees: { notEqualTo: \"0\" } }\n                ]\n              }\n            ]\n          }\n        ) {\n          nodes {\n            ...PoolOrder\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getTradeHistoryByAccount($first: Int!, $idSs58: String!) {\n    account: accountByIdSs58(idSs58: $idSs58) {\n      lp: liquidityProviderByAccountId {\n        tradeHistory: poolOrdersByLiquidityProviderId(\n          orderBy: ID_DESC\n          first: $first\n          filter: {\n            or: [\n              {\n                orderType: { equalTo: LIMIT }\n                or: [\n                  { filledBaseAmount: { notEqualTo: \"0\" } }\n                  { filledQuoteAmount: { notEqualTo: \"0\" } }\n                ]\n              }\n              {\n                orderType: { equalTo: RANGE }\n                or: [\n                  { baseCollectedFees: { notEqualTo: \"0\" } }\n                  { quoteCollectedFees: { notEqualTo: \"0\" } }\n                ]\n              }\n            ]\n          }\n        ) {\n          nodes {\n            ...PoolOrder\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getOrdersByAccount($first: Int!, $idSs58: String!) {\n    account: accountByIdSs58(idSs58: $idSs58) {\n      lp: liquidityProviderByAccountId {\n        tradeHistory: poolOrdersByLiquidityProviderId(\n          orderBy: ID_DESC\n          first: $first\n          filter: {\n            or: [\n              {\n                orderType: { equalTo: LIMIT }\n                or: [\n                  { filledBaseAmount: { notEqualTo: \"0\" } }\n                  { filledQuoteAmount: { notEqualTo: \"0\" } }\n                ]\n              }\n              {\n                orderType: { equalTo: RANGE }\n                or: [\n                  { baseCollectedFees: { notEqualTo: \"0\" } }\n                  { quoteCollectedFees: { notEqualTo: \"0\" } }\n                ]\n              }\n            ]\n          }\n        ) {\n          nodes {\n            ...PoolOrder\n          }\n        }\n        allOrders: poolOrdersByLiquidityProviderId(orderBy: ID_DESC, first: $first) {\n          nodes {\n            ...PoolOrder\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getOrdersByAccount($first: Int!, $idSs58: String!) {\n    account: accountByIdSs58(idSs58: $idSs58) {\n      lp: liquidityProviderByAccountId {\n        tradeHistory: poolOrdersByLiquidityProviderId(\n          orderBy: ID_DESC\n          first: $first\n          filter: {\n            or: [\n              {\n                orderType: { equalTo: LIMIT }\n                or: [\n                  { filledBaseAmount: { notEqualTo: \"0\" } }\n                  { filledQuoteAmount: { notEqualTo: \"0\" } }\n                ]\n              }\n              {\n                orderType: { equalTo: RANGE }\n                or: [\n                  { baseCollectedFees: { notEqualTo: \"0\" } }\n                  { quoteCollectedFees: { notEqualTo: \"0\" } }\n                ]\n              }\n            ]\n          }\n        ) {\n          nodes {\n            ...PoolOrder\n          }\n        }\n        allOrders: poolOrdersByLiquidityProviderId(orderBy: ID_DESC, first: $first) {\n          nodes {\n            ...PoolOrder\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PoolOrder on PoolOrder {\n    id\n    orderId\n    liquidityProviderId\n    orderType\n    status\n    lowerTick\n    upperTick\n    filledQuoteAmount\n    quoteAsset\n    quoteAmount\n    quoteCollectedFees\n    quoteCollectedFeesUsd\n    baseAsset\n    filledBaseAmount\n    baseAmount\n    baseCollectedFees\n    baseCollectedFeesUsd\n    orderCreatedEventId\n    orderLastUpdatedEventId\n  }\n"): (typeof documents)["\n  fragment PoolOrder on PoolOrder {\n    id\n    orderId\n    liquidityProviderId\n    orderType\n    status\n    lowerTick\n    upperTick\n    filledQuoteAmount\n    quoteAsset\n    quoteAmount\n    quoteCollectedFees\n    quoteCollectedFeesUsd\n    baseAsset\n    filledBaseAmount\n    baseAmount\n    baseCollectedFees\n    baseCollectedFeesUsd\n    orderCreatedEventId\n    orderLastUpdatedEventId\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetCachePools($baseAsset: ChainflipAsset) {\n    pools: allPools(condition: { baseAsset: $baseAsset }) {\n      nodes {\n        baseAsset\n        quoteAsset\n        price\n        rangeOrderPrice\n        baseLiquidityAmount\n        quoteLiquidityAmount\n        liquidityFeeHundredthPips\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCachePools($baseAsset: ChainflipAsset) {\n    pools: allPools(condition: { baseAsset: $baseAsset }) {\n      nodes {\n        baseAsset\n        quoteAsset\n        price\n        rangeOrderPrice\n        baseLiquidityAmount\n        quoteLiquidityAmount\n        liquidityFeeHundredthPips\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPoolTableData($date24HoursAgo: Datetime!, $date48HoursAgo: Datetime!) {\n    currentDayAggregates: allPoolSwaps(\n      filter: { assetSwappedBlockTimestamp: { greaterThanOrEqualTo: $date24HoursAgo } }\n    ) {\n      groupedAggregates(groupBy: [FROM_ASSET, TO_ASSET]) {\n        fromAssetToAsset: keys\n        sum {\n          toValueUsd\n          liquidityFeeValueUsd\n        }\n      }\n    }\n    previousDayAggregates: allPoolSwaps(\n      filter: {\n        assetSwappedBlockTimestamp: {\n          greaterThanOrEqualTo: $date48HoursAgo\n          lessThan: $date24HoursAgo\n        }\n      }\n    ) {\n      groupedAggregates(groupBy: [FROM_ASSET, TO_ASSET]) {\n        fromAssetToAsset: keys\n        sum {\n          toValueUsd\n          liquidityFeeValueUsd\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPoolTableData($date24HoursAgo: Datetime!, $date48HoursAgo: Datetime!) {\n    currentDayAggregates: allPoolSwaps(\n      filter: { assetSwappedBlockTimestamp: { greaterThanOrEqualTo: $date24HoursAgo } }\n    ) {\n      groupedAggregates(groupBy: [FROM_ASSET, TO_ASSET]) {\n        fromAssetToAsset: keys\n        sum {\n          toValueUsd\n          liquidityFeeValueUsd\n        }\n      }\n    }\n    previousDayAggregates: allPoolSwaps(\n      filter: {\n        assetSwappedBlockTimestamp: {\n          greaterThanOrEqualTo: $date48HoursAgo\n          lessThan: $date24HoursAgo\n        }\n      }\n    ) {\n      groupedAggregates(groupBy: [FROM_ASSET, TO_ASSET]) {\n        fromAssetToAsset: keys\n        sum {\n          toValueUsd\n          liquidityFeeValueUsd\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetAllEnvironmentAddresses {\n    allEnvironmentAddresses {\n      nodes {\n        redemptionTax\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetAllEnvironmentAddresses {\n    allEnvironmentAddresses {\n      nodes {\n        redemptionTax\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetLatestFlipSupplyQuery {\n    flipSupply: flipSupplyById(id: 1) {\n      totalIssuance\n      offchainFunds\n      annualSystemCompoundedRewards\n    }\n  }\n"): (typeof documents)["\n  query GetLatestFlipSupplyQuery {\n    flipSupply: flipSupplyById(id: 1) {\n      totalIssuance\n      offchainFunds\n      annualSystemCompoundedRewards\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ExecutedRedemption on ExecutedRedemption {\n    txId\n    block\n    amount\n    validatorIdHex\n    blockTimestamp\n  }\n"): (typeof documents)["\n  fragment ExecutedRedemption on ExecutedRedemption {\n    txId\n    block\n    amount\n    validatorIdHex\n    blockTimestamp\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment EventWithBlock on Event {\n    id\n    block: blockByBlockId {\n      id\n      timestamp\n      hash\n    }\n    indexInBlock\n  }\n"): (typeof documents)["\n  fragment EventWithBlock on Event {\n    id\n    block: blockByBlockId {\n      id\n      timestamp\n      hash\n    }\n    indexInBlock\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment EpochWithRotation on Epoch {\n    id\n    rotationEvents: rotationEventsByEpochId {\n      nodes {\n        id\n        type\n        event: eventByEventId {\n          ...EventWithBlock\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment EpochWithRotation on Epoch {\n    id\n    rotationEvents: rotationEventsByEpochId {\n      nodes {\n        id\n        type\n        event: eventByEventId {\n          ...EventWithBlock\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Validators {\n    validators: allValidators {\n      nodes {\n        ...CacheValidator\n      }\n    }\n  }\n"): (typeof documents)["\n  query Validators {\n    validators: allValidators {\n      nodes {\n        ...CacheValidator\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetValidatorsByWalletAddress($walletAddress: String!) {\n    walletValidators: validatorsByWalletAddress(input: { address: $walletAddress }) {\n      ...CacheValidator\n    }\n  }\n"): (typeof documents)["\n  query GetValidatorsByWalletAddress($walletAddress: String!) {\n    walletValidators: validatorsByWalletAddress(input: { address: $walletAddress }) {\n      ...CacheValidator\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetExecutedRedemptionsByValidatorIdsHex($accountIds: [String!]) {\n    executedRedemptions: allExecutedRedemptions(\n      filter: { validatorIdHex: { in: $accountIds } }\n      orderBy: BLOCK_TIMESTAMP_DESC\n    ) {\n      nodes {\n        ...ExecutedRedemption\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetExecutedRedemptionsByValidatorIdsHex($accountIds: [String!]) {\n    executedRedemptions: allExecutedRedemptions(\n      filter: { validatorIdHex: { in: $accountIds } }\n      orderBy: BLOCK_TIMESTAMP_DESC\n    ) {\n      nodes {\n        ...ExecutedRedemption\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetLatestAuthoritySet {\n    currentAuthoritySet: allAuthorityMemberships(orderBy: EPOCH_ID_DESC, first: 1) {\n      nodes {\n        epochId\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetLatestAuthoritySet {\n    currentAuthoritySet: allAuthorityMemberships(orderBy: EPOCH_ID_DESC, first: 1) {\n      nodes {\n        epochId\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetAccountsRewards($accountIds: [Int!]!, $epochId: Int) {\n    historicRewards: allAccountEpochBalanceChanges(\n      filter: { accountId: { in: $accountIds }, endOfEpochBalance: { isNull: false } }\n    ) {\n      groupedAggregates(groupBy: ACCOUNT_ID) {\n        accountId: keys\n        sum {\n          startOfEpochBalance\n          balanceChange\n          endOfEpochBalance\n        }\n      }\n    }\n    currentRewards: allAccountEpochBalanceChanges(\n      filter: { accountId: { in: $accountIds }, epochId: { equalTo: $epochId } }\n    ) {\n      nodes {\n        accountId\n        startOfEpochBalance\n        balanceChange\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetAccountsRewards($accountIds: [Int!]!, $epochId: Int) {\n    historicRewards: allAccountEpochBalanceChanges(\n      filter: { accountId: { in: $accountIds }, endOfEpochBalance: { isNull: false } }\n    ) {\n      groupedAggregates(groupBy: ACCOUNT_ID) {\n        accountId: keys\n        sum {\n          startOfEpochBalance\n          balanceChange\n          endOfEpochBalance\n        }\n      }\n    }\n    currentRewards: allAccountEpochBalanceChanges(\n      filter: { accountId: { in: $accountIds }, epochId: { equalTo: $epochId } }\n    ) {\n      nodes {\n        accountId\n        startOfEpochBalance\n        balanceChange\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetAccountsSlashQuery($accountIds: [Int!], $epochId: Int) {\n    slashedEvents: allAccountFundingEvents(\n      filter: { accountId: { in: $accountIds }, and: { type: { equalTo: SLASHED } } }\n    ) {\n      groupedAggregates(groupBy: ACCOUNT_ID) {\n        accountId: keys\n        sum {\n          amount\n        }\n      }\n    }\n    currentEpochSlashedEvents: allAccountFundingEvents(\n      filter: {\n        accountId: { in: $accountIds }\n        and: { type: { equalTo: SLASHED }, and: { epochId: { equalTo: $epochId } } }\n      }\n    ) {\n      aggregates {\n        sum {\n          amount\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetAccountsSlashQuery($accountIds: [Int!], $epochId: Int) {\n    slashedEvents: allAccountFundingEvents(\n      filter: { accountId: { in: $accountIds }, and: { type: { equalTo: SLASHED } } }\n    ) {\n      groupedAggregates(groupBy: ACCOUNT_ID) {\n        accountId: keys\n        sum {\n          amount\n        }\n      }\n    }\n    currentEpochSlashedEvents: allAccountFundingEvents(\n      filter: {\n        accountId: { in: $accountIds }\n        and: { type: { equalTo: SLASHED }, and: { epochId: { equalTo: $epochId } } }\n      }\n    ) {\n      aggregates {\n        sum {\n          amount\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetValidatorCfeVersion($idSs58: String!) {\n    account: accountByIdSs58(idSs58: $idSs58) {\n      validator: validatorByAccountId {\n        cfeVersionId\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetValidatorCfeVersion($idSs58: String!) {\n    account: accountByIdSs58(idSs58: $idSs58) {\n      validator: validatorByAccountId {\n        cfeVersionId\n      }\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;